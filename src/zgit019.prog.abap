*&---------------------------------------------------------------------*
*& Report ZGIT019
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZGIT019.
DATA:R1  TYPE C VALUE '', "会计凭证冲销与创建
     R2  TYPE C VALUE '', "创建采购相关BAPI
     R3  TYPE C VALUE '', "采购订单相关操作
     R4  TYPE C VALUE '', "创建物料主数据
     R5  TYPE C VALUE '', "生产报工
     R6  TYPE C VALUE '', "创建销售订单
     R7  TYPE C VALUE '', "创建交货单 拣配过账
     R8  TYPE C VALUE '', "创建发票
     R9  TYPE C VALUE '', "创建生产订单
     R10 TYPE C VALUE '', "创建BP BAPI
     R11 TYPE C VALUE '', "执行外部数据操作
     R12 TYPE C VALUE '', "创建结算规则
     R13 TYPE C VALUE '', "发票校验
     R14 TYPE C VALUE '', "批量工艺路线
     R15 TYPE C VALUE '', "固定资产报废
     R16 TYPE C VALUE '', "获取物料特征值
     R17 TYPE C VALUE '', "物料移动采购订单收货
     R18 TYPE C VALUE 'X', "修改交货单
     R19 TYPE C VALUE '', "修改拣配单数量
     R20 TYPE C VALUE '', "交货单过账
     R21 TYPE C VALUE '', "DN 开票
     R22 TYPE C VALUE '', "PS 网络组件批量导入
     R23 TYPE C VALUE '', "PS 项目各级状态更新
     R24 TYPE C VALUE '', "PM 批量导入记录凭证
     R25 TYPE C VALUE '', "PM 批量关闭维修订单
     R26 TYPE C VALUE '', "PM 批量创建维修工单
     R27 TYPE C VALUE '', "修改BOM
     R28 TYPE C VALUE '', "WM 库存调拨
     R29 TYPE C VALUE '', "WM 状态转储
     R30 TYPE C VALUE '', "WM 仓位转储
     R31 TYPE C VALUE '', "WM 盘点
     R32 TYPE C VALUE '', "供应商发票清账
     R33 TYPE C VALUE '', "更新检验批
     R34 TYPE C VALUE '', "更新检验批使用决策
     R35 TYPE C VALUE '', "更新包装信息
     R36 TYPE C VALUE '', "SAP 调用Java
     R37 TYPE C VALUE '', "批量清账
R38 TYPE C VALUE ''. "批次拆分加过账

IF R1 = 'X'.
  "-------------------------------------------------------------------创会计凭证BAPI
  DATA:WA_DOCUMENTHEADER    TYPE BAPIACHE09, "凭证抬头信息
       IT_CURRENCYAMOUNT    TYPE STANDARD TABLE OF BAPIACCR09 WITH HEADER LINE,
       IT_ACCOUNTGL         TYPE STANDARD TABLE OF BAPIACGL09 WITH HEADER LINE,
       IT_BAPIRET2          TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE,
       IT_ACCOUNTRECEIVABLE TYPE STANDARD TABLE OF BAPIACAR09 WITH HEADER LINE.
  DATA:IT_EXTENSION2 TYPE STANDARD TABLE OF BAPIPAREX WITH HEADER LINE,
       WA_EXTENSION2 LIKE ZACC_BAPI_STRU.
  DATA:L_OBJ_TYPE LIKE  BAPIACREV-OBJ_TYPE,
       L_OBJ_KEY  LIKE  BAPIACREV-OBJ_KEY,
       L_OBJ_SYS  LIKE  BAPIACREV-OBJ_SYS.
  " 400 凭证类型 100001347
  WA_DOCUMENTHEADER-DOC_DATE = '20181201'. "凭证日期
  WA_DOCUMENTHEADER-PSTNG_DATE = '20181201'."过账日期
*WA_DOCUMENTHEADER-FIS_PERIOD = '12'. "期间
*WA_DOCUMENTHEADER-FISC_YEAR = '2018'. "财年
  WA_DOCUMENTHEADER-DOC_TYPE = 'SA'.  "凭证类型
  WA_DOCUMENTHEADER-COMP_CODE =  '1100'. "公司代码
  WA_DOCUMENTHEADER-USERNAME = SY-UNAME. "用户名
*  WA_DOCUMENTHEADER-BUS_ACT    =   'RFBU'.
  WA_DOCUMENTHEADER-TRANS_DATE = '20181201'.

  IT_CURRENCYAMOUNT-ITEMNO_ACC = '1'."会计凭证行项目
  IT_CURRENCYAMOUNT-CURRENCY = 'CNY'."货币码
  IT_CURRENCYAMOUNT-AMT_DOCCUR = '-100'."金额
  APPEND IT_CURRENCYAMOUNT.

  IT_CURRENCYAMOUNT-ITEMNO_ACC = '2'."会计凭证行项目
  IT_CURRENCYAMOUNT-CURRENCY = 'CNY'."货币码
  IT_CURRENCYAMOUNT-AMT_DOCCUR = '100'."金额
  APPEND IT_CURRENCYAMOUNT.

*IT_ACCOUNTGL-ITEMNO_ACC = '1'."总账分类账
*IT_ACCOUNTGL-CUSTOMER = 'A0022'."总账分类账
**IT_ACCOUNTGL-GL_ACCOUNT = '1001000099'.
*IT_ACCOUNTGL-ITEM_TEXT = 'BAPI 创建的会计凭证001行'."总账分类账
*APPEND IT_ACCOUNTGL.

  IT_ACCOUNTRECEIVABLE-ITEMNO_ACC = '1'.
  IT_ACCOUNTRECEIVABLE-CUSTOMER = 'A0022'.
  APPEND IT_ACCOUNTRECEIVABLE.

  IT_ACCOUNTGL-ITEMNO_ACC = '2'."总账分类账
  IT_ACCOUNTGL-GL_ACCOUNT = '6401010000'."总账分类账
  IT_ACCOUNTGL-ITEM_TEXT = 'BAPI 创建的会计凭证002行'."总账分类账
  APPEND IT_ACCOUNTGL.

*"会计凭证扩展字段 方式一
*  WA_EXTENSION2-POSNR = '1'."行项目
*  WA_EXTENSION2-BSCHL = '18'."记账码
*  IT_EXTENSION2-STRUCTURE  = 'ZACC_BAPI_STRU'.
*  IT_EXTENSION2-VALUEPART1 = WA_EXTENSION2.
*  APPEND IT_EXTENSION2.
*  WA_EXTENSION2-POSNR = '2'."行项目
*  WA_EXTENSION2-BSCHL = '40'."记账码
*  WA_EXTENSION2-ZZCFCD = '100'."现金流量码
*  IT_EXTENSION2-STRUCTURE  = 'ZACC_BAPI_STRU'.
*  IT_EXTENSION2-VALUEPART1 = WA_EXTENSION2.
*  APPEND IT_EXTENSION2.
*"会计凭证扩展字段 方式二
  IT_EXTENSION2-STRUCTURE  = 'BSCHL'."记账码
  IT_EXTENSION2-VALUEPART1 = '1'. "行项目
  IT_EXTENSION2-VALUEPART2 = '18'. "记账数据
  APPEND IT_EXTENSION2.

  IT_EXTENSION2-STRUCTURE  = 'BSCHL'."记账码
  IT_EXTENSION2-VALUEPART1 = '2'. "行项目
  IT_EXTENSION2-VALUEPART2 = '40'. "记账数据
  APPEND IT_EXTENSION2.

  IT_EXTENSION2-STRUCTURE  = 'ZZCFCD'."现金流量码
  IT_EXTENSION2-VALUEPART1 = '2'. "行项目
  IT_EXTENSION2-VALUEPART2 = '100'. "现金流量码数据
  APPEND IT_EXTENSION2.

  CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
    EXPORTING
      DOCUMENTHEADER    = WA_DOCUMENTHEADER
    IMPORTING
      OBJ_TYPE          = L_OBJ_TYPE
      OBJ_SYS           = L_OBJ_SYS
      OBJ_KEY           = L_OBJ_KEY
    TABLES
      CURRENCYAMOUNT    = IT_CURRENCYAMOUNT[]
      ACCOUNTGL         = IT_ACCOUNTGL[]
      EXTENSION2        = IT_EXTENSION2[]
      ACCOUNTRECEIVABLE = IT_ACCOUNTRECEIVABLE[]
      RETURN            = IT_BAPIRET2.

  LOOP AT  IT_BAPIRET2 .
    WRITE:/ '消息类型',IT_BAPIRET2-TYPE ,'消息文本',IT_BAPIRET2-MESSAGE.
  ENDLOOP.
  READ TABLE IT_BAPIRET2  TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC <> 0.
    WRITE:/ '凭证号：',L_OBJ_KEY.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ENDIF.
  WRITE:/ '---------------------------------------------'.

  "-------------------------------------------------------------------创会计凭证BAPI

  "--------------------------------------------------------------------会计凭证冲销（只能冲销会计凭证BAPI产生的） fb08 会计凭证冲销
  DATA: WA_BAPIDOCHDRR TYPE BAPIACREV,
        GT_RETURN      TYPE TABLE OF BAPIRET2 WITH HEADER LINE,
        I_RETURN       TYPE BAPIRET2,
        GT_INFO        TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE.

*   给 BAPI 函数相应的参数赋值 凭证类型 KZ  可以直接过账
  DATA:WA_BKPF TYPE BKPF.
  SELECT SINGLE * INTO CORRESPONDING FIELDS OF WA_BKPF FROM BKPF WHERE BUKRS = '1100' AND
     BELNR = L_OBJ_KEY+0(10) AND GJAHR = '2018'.
  WA_BAPIDOCHDRR-OBJ_TYPE     = WA_BKPF-AWTYP. "产考过程
  WA_BAPIDOCHDRR-OBJ_KEY      = WA_BKPF-AWKEY . "<FS_BKPF>-AWKEY. "对象键值
  WA_BAPIDOCHDRR-OBJ_KEY_R    = WA_BKPF-AWKEY . "BKPF-AWKEY. "取消: 对象码 (AWREF_REV and AWORG_REV)
  WA_BAPIDOCHDRR-PSTNG_DATE   = '20181231'. "凭证中的过帐日期
  WA_BAPIDOCHDRR-FIS_PERIOD   = '12'.  "会计期间
  WA_BAPIDOCHDRR-COMP_CODE    = WA_BKPF-BUKRS.  "公司代码
*WA_BAPIDOCHDRR-AC_DOC_NO    = WA_BKPF-BELNR.   "会计凭证号码
  WA_BAPIDOCHDRR-REASON_REV   = '01'.   "冲销原因 01 当前期间内冲销 02 已关闭期间类冲销
*   取得系统 LOGICAL SYSTEM
  CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
    IMPORTING
      OWN_LOGICAL_SYSTEM = WA_BAPIDOCHDRR-OBJ_SYS.
*   调用 BAPI 函数，冲销会计凭证
  CALL FUNCTION 'BAPI_ACC_DOCUMENT_REV_POST'
*      EXPORTING
*        obj_type = gv_glvor
    EXPORTING
      REVERSAL = WA_BAPIDOCHDRR
      BUS_ACT  = WA_BKPF-GLVOR   "bkpf-GLVOR
    IMPORTING
      OBJ_TYPE = L_OBJ_TYPE
      OBJ_KEY  = L_OBJ_KEY
      OBJ_SYS  = L_OBJ_SYS
    TABLES
      RETURN   = GT_RETURN.

  LOOP AT GT_RETURN .
    WRITE:/ GT_RETURN-MESSAGE.
  ENDLOOP.

  READ TABLE GT_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ L_OBJ_TYPE,L_OBJ_KEY,L_OBJ_SYS.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.

  ENDIF.
  "--------------------------------------------------------------------会计凭证冲销
ENDIF.


IF R2 = 'X'.
  "---------------------------------------------------------------------采购申请
  DATA:L_NUMBER                  TYPE BAPIEBANC-PREQ_NO,
       IT_REQUISITION            TYPE STANDARD TABLE OF BAPIEBANC WITH HEADER LINE,
       IT_REQUISITION_ITEMS_TEXT TYPE STANDARD TABLE OF BAPIEBANTX WITH HEADER LINE,
       IT_REQUISITION_RETURN     TYPE STANDARD TABLE OF BAPIRETURN WITH HEADER LINE.

  IT_REQUISITION-PREQ_ITEM = '1'."行项目编号
  IT_REQUISITION-PUR_GROUP = '303'."采购组
  IT_REQUISITION-DOC_TYPE = 'KUS3'."采购凭证类型
  IT_REQUISITION-STORE_LOC = '1001'."库存地点
  IT_REQUISITION-PLANT = '1101'."
  IT_REQUISITION-DELIV_DATE = '20190101'."交货日期
  IT_REQUISITION-MATERIAL = '000000202110000394'."物料
  IT_REQUISITION-QUANTITY = '10'."采购申请数量
  APPEND IT_REQUISITION.

  IT_REQUISITION-PREQ_ITEM = '2'."行项目编号
  IT_REQUISITION-PUR_GROUP = '303'."采购组
  IT_REQUISITION-STORE_LOC = '1001'."库存地点
  IT_REQUISITION-DOC_TYPE = 'KUS3'."采购凭证类型
  IT_REQUISITION-PLANT = '1101'."
  IT_REQUISITION-MATERIAL = '000000101110000789'."
  IT_REQUISITION-DELIV_DATE = '20190101'."交货日期
  IT_REQUISITION-QUANTITY = '10'."采购申请数量
  APPEND IT_REQUISITION.

  "行项目文本
  IT_REQUISITION_ITEMS_TEXT-PREQ_ITEM = '1'."行项目
  IT_REQUISITION_ITEMS_TEXT-TEXT_ID = 'B01'."行项目
  IT_REQUISITION_ITEMS_TEXT-TEXT_LINE = 'aaaaaaaaaaaa'."行项目
  APPEND IT_REQUISITION_ITEMS_TEXT.
  IT_REQUISITION_ITEMS_TEXT-PREQ_ITEM = '1'."行项目
  IT_REQUISITION_ITEMS_TEXT-TEXT_ID = 'B01'."行项目
  IT_REQUISITION_ITEMS_TEXT-TEXT_LINE = 'BBBB'."行项目
  APPEND IT_REQUISITION_ITEMS_TEXT.

  CALL FUNCTION 'BAPI_REQUISITION_CREATE'
    IMPORTING
      NUMBER                = L_NUMBER
    TABLES
      REQUISITION_ITEMS     = IT_REQUISITION[]
      REQUISITION_ITEM_TEXT = IT_REQUISITION_ITEMS_TEXT[]
      RETURN                = IT_REQUISITION_RETURN[].

  LOOP AT IT_REQUISITION_RETURN WHERE  TYPE = 'E'.
    WRITE:/ '创建采购申请。 消息类型', IT_REQUISITION_RETURN-TYPE ,'消息文本',IT_REQUISITION_RETURN-MESSAGE.
  ENDLOOP.
  READ TABLE IT_REQUISITION_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ '采购申请创建成功，采购申请号为：',L_NUMBER.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.

  "采购申请审批
  CALL FUNCTION 'BAPI_REQUISITION_RELEASE'
    EXPORTING
      NUMBER   = L_NUMBER "采购审批编号
      REL_CODE = 'R1' "审批代码
      ITEM     = '10' "审批的行项目
    TABLES
      RETURN   = IT_REQUISITION_RETURN[].

  READ TABLE IT_REQUISITION_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ '采购申请审批成功！采购申请号为：',L_NUMBER.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.


*  "采购申请审批 取消
  CALL FUNCTION 'BAPI_REQUISITION_RESET_RELEASE'
    EXPORTING
      NUMBER   = L_NUMBER "采购审批编号
      REL_CODE = 'R1' "审批代码
      ITEM     = '10' "审批的行项目.
    TABLES
      RETURN   = IT_REQUISITION_RETURN[].

  READ TABLE IT_REQUISITION_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ '采购申请取消审批成功！采购申请号为：',L_NUMBER.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.

  "更改采购申请  BAPI_PR_CHANGE
  "创建采购申请  BAPI_PR_CREATE
  "显示采购申请  BAPI_PR_GETDETAIL
  "删除采购申请  BAPI_REQUISITION_DELETE
  "---------------------------------------------------------------------采购申请
ENDIF.

IF R3 = 'X'.
  DATA:WA_POHEADER     TYPE  BAPIMEPOHEADER,
       WA_POHEADERX    TYPE BAPIMEPOHEADERX,
       IT_POITEM       TYPE STANDARD TABLE OF BAPIMEPOITEM WITH HEADER LINE,
       IT_POITEMX      TYPE STANDARD TABLE OF BAPIMEPOITEMX WITH HEADER LINE,
       IT_PO_RETURN    TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE,
       IT_POTEXTHEADER TYPE STANDARD TABLE OF BAPIMEPOTEXTHEADER WITH HEADER LINE,
       IT_POTEXTITEM   TYPE STANDARD TABLE OF BAPIMEPOTEXT WITH HEADER LINE,
       IT_EXTENSIONIN  TYPE STANDARD TABLE OF BAPIPAREX WITH HEADER LINE.

  WA_POHEADER-COMP_CODE = '1100'."公司代码
  WA_POHEADER-DOC_TYPE = 'KUS4'."采购订单类型   不能写错，写错会提示文本错误
  WA_POHEADER-VENDOR = '0000100014'."供应商
  WA_POHEADER-PURCH_ORG = '1100'."采购组织
  WA_POHEADER-PUR_GROUP = '130'."采购组
  WA_POHEADER-CREAT_DATE = SY-DATUM.
  WA_POHEADER-CREATED_BY = SY-UNAME.
  WA_POHEADER-CURRENCY = 'CNY'.

  WA_POHEADERX-COMP_CODE = 'X'."工厂
  WA_POHEADERX-DOC_TYPE = 'X'."采购订单类型
  WA_POHEADERX-VENDOR = 'X'."供应商
  WA_POHEADERX-PURCH_ORG = 'X'."采购组织
  WA_POHEADERX-PUR_GROUP = 'X'."采购组
  WA_POHEADERX-CREAT_DATE = 'X'.
  WA_POHEADERX-CREATED_BY = 'X'.
  WA_POHEADERX-CURRENCY = 'X'.

  IT_POITEM-PO_ITEM = '1'."
  IT_POITEM-MATERIAL = '000000301010000050'."
  IT_POITEM-QUANTITY = '100'."
  IT_POITEM-TAX_CODE = 'J1'."
  IT_POITEM-STGE_LOC = '1003'.
  IT_POITEM-NET_PRICE =  '1000'."净价
  APPEND IT_POITEM.

  IT_POITEMX-PO_ITEM = '1'."   “问题点 一定要记住传这个参数
  IT_POITEMX-PO_ITEMX = 'X'."
  IT_POITEMX-MATERIAL = 'X'."
  IT_POITEMX-QUANTITY = 'X'."
  IT_POITEMX-TAX_CODE = 'X'."
  IT_POITEMX-STGE_LOC = 'X'.
  IT_POITEMX-NET_PRICE =  'X'."净价
  APPEND IT_POITEMX.
  "301010000050

  IT_POTEXTHEADER-PO_ITEM = '1'."
  IT_POTEXTHEADER-TEXT_ID = 'F01'."
  IT_POTEXTHEADER-TEXT_LINE = 'PO HEAD TEXT'."
  APPEND IT_POTEXTHEADER.

  IT_POTEXTITEM-PO_ITEM = '1'."
  IT_POTEXTITEM-TEXT_ID = 'F01'."
  IT_POTEXTITEM-TEXT_LINE = 'PO ITEM TEXT'."
  APPEND IT_POTEXTITEM.

  "添加扩张字段  定义的结构在 L2012F23 代码中 表头的扩展结构 是 BAPI_TE_MEPOHEADER BAPI_TE_MEPOHEADERX
  " 表身是 BAPI_TE_MEPOITEM  BAPI_TE_MEPOITEM
  DATA:WA_EXTENSIONIN  TYPE BAPI_TE_MEPOITEM,
       WA_EXTENSIONINX TYPE BAPI_TE_MEPOITEMX.

  WA_EXTENSIONIN-PO_ITEM = '1'."行项目
  WA_EXTENSIONIN-ZZ_BRAND = '品牌'."品牌

  IT_EXTENSIONIN-STRUCTURE = 'BAPI_TE_MEPOITEM'.
  IT_EXTENSIONIN-VALUEPART1 = WA_EXTENSIONIN.
  APPEND IT_EXTENSIONIN.

  WA_EXTENSIONINX-PO_ITEM =  '1'.
  WA_EXTENSIONINX-ZZ_BRAND = 'X'.

  IT_EXTENSIONIN-STRUCTURE = 'BAPI_TE_MEPOITEMX'.
  IT_EXTENSIONIN-VALUEPART1 = WA_EXTENSIONINX.
  APPEND IT_EXTENSIONIN.

*  SET UPDATE TASK LOCAL.
  CALL FUNCTION 'BAPI_PO_CREATE1'
    EXPORTING
      POHEADER         = WA_POHEADER
      POHEADERX        = WA_POHEADERX
    IMPORTING
      EXPPURCHASEORDER = L_NUMBER
    TABLES
      POITEM           = IT_POITEM[]
      POITEMX          = IT_POITEMX[]
      POTEXTHEADER     = IT_POTEXTHEADER[]  "头部文本
      POTEXTITEM       = IT_POTEXTITEM[]      "行项目文本
      EXTENSIONIN      = IT_EXTENSIONIN[] "之定义扩展字段
      RETURN           = IT_PO_RETURN[].

  LOOP AT IT_PO_RETURN WHERE TYPE = 'E'.
    WRITE:/ '创建采购订单。 消息类型', IT_PO_RETURN-TYPE ,'消息文本',IT_PO_RETURN-MESSAGE.
  ENDLOOP.
  READ TABLE IT_PO_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ '采购订单创建成功！采购订单号为：',L_NUMBER.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
*    COMMIT WORK.
  ENDIF.

*  MESSAGE '-----------------------采购订单创建完成' TYPE 'I'.

  " 采购订单审批
  DATA:IT_PO_RELEASE_RETURN TYPE STANDARD TABLE OF BAPIRETURN WITH HEADER LINE.
  SET UPDATE TASK LOCAL.
  CALL FUNCTION 'BAPI_PO_RELEASE'
    EXPORTING
      PURCHASEORDER = L_NUMBER
      PO_REL_CODE   = 'P1'
    TABLES
      RETURN        = IT_PO_RELEASE_RETURN[].

  LOOP AT IT_PO_RELEASE_RETURN WHERE TYPE = 'E'.
    WRITE:/'采购订单审批失败',IT_PO_RELEASE_RETURN-MESSAGE.
  ENDLOOP.
  READ TABLE IT_PO_RELEASE_RETURN TRANSPORTING NO FIELDS WITH KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ '采购订单审批成功！采购订单号为：',L_NUMBER.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
*    COMMIT WORK.
  ENDIF.
*  MESSAGE '----------------------一级审批创建完成' TYPE 'I'.

*  WAIT UP TO '0.1' SECONDS.

  "采购订单取消审批

  SET UPDATE TASK LOCAL.
  CALL FUNCTION 'BAPI_PO_RESET_RELEASE'
    EXPORTING
      PURCHASEORDER = L_NUMBER
      PO_REL_CODE   = 'P1'
    TABLES
      RETURN        = IT_PO_RELEASE_RETURN[].

  LOOP AT IT_PO_RELEASE_RETURN WHERE TYPE = 'E'.
    WRITE:/'采购订单审取消审批失败',IT_PO_RELEASE_RETURN-MESSAGE.
  ENDLOOP.
  READ TABLE IT_PO_RELEASE_RETURN TRANSPORTING NO FIELDS WITH KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ '采购订单取消审批成功！采购订单号为：',L_NUMBER.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
*    COMMIT WORK.
  ENDIF.
*  MESSAGE '----------------------一级取消审批创建完成' TYPE 'I'.

  "更改采购订单 BAPI_PO_CHANGE
  "查询采购订单 BAPI_PO_GETDETAIL1
  "查询采购订单 BAPI_PO_GETDETAIL
  "更改采购订单 BAPI_PO_CHANGE

  "计划协议计划行
  DATA:IT_SCHEDULE        TYPE STANDARD TABLE OF BAPIMEPOSCHEDULE WITH HEADER LINE,
       IT_SCHEDULEX       TYPE STANDARD TABLE OF BAPIMEPOSCHEDULX WITH HEADER LINE,
       IT_SCHEDULE_RETURN TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE.

  IT_SCHEDULE-PO_ITEM = '00010'.
  IT_SCHEDULE-SCHED_LINE = '0001'."
  IT_SCHEDULE-DEL_DATCAT_EXT = 'D'.

  IT_SCHEDULE-DELIVERY_DATE = '20190109'."交货日期
  IT_SCHEDULE-PO_DATE = '20190109'.
  IT_SCHEDULE-QUANTITY = '50'."计划数量
  APPEND IT_SCHEDULE.

  IT_SCHEDULEX-PO_ITEM = '00010'.
  IT_SCHEDULEX-SCHED_LINE = '0001'."
  IT_SCHEDULEX-SCHED_LINEX = 'X'.
  IT_SCHEDULEX-DEL_DATCAT_EXT = 'X'.
  IT_SCHEDULEX-DELIVERY_DATE = 'X'."交货日期
  IT_SCHEDULEX-PO_DATE = 'X'.
  IT_SCHEDULEX-QUANTITY = 'X'."计划数量
  APPEND IT_SCHEDULEX.

*  IT_SCHEDULE-PO_ITEM = '00010'.
*  IT_SCHEDULE-SCHED_LINE = '0002'."
*  IT_SCHEDULE-DELETE_IND = 'X'. "删除计划行标识
**  IT_SCHEDULE-DEL_DATCAT_EXT = 'D'.
**  IT_SCHEDULE-DELIVERY_DATE = '20190110'."交货日期
**  IT_SCHEDULE-PO_DATE = '20190110'.
**  IT_SCHEDULE-QUANTITY = '50'."计划数量
*  APPEND IT_SCHEDULE.
*
*  IT_SCHEDULEX-PO_ITEM = '00010'.
*  IT_SCHEDULEX-SCHED_LINE = '0002'."
*  IT_SCHEDULEX-DELETE_IND = 'X'."删除计划行标识
**  IT_SCHEDULEX-SCHED_LINEX = 'X'.
**  IT_SCHEDULEX-DEL_DATCAT_EXT = 'X'.
**  IT_SCHEDULEX-PO_DATE = 'X'.
**  IT_SCHEDULEX-DELIVERY_DATE = 'X'."交货日期
**  IT_SCHEDULEX-QUANTITY = 'X'."计划数量
*  APPEND IT_SCHEDULEX.

  IT_SCHEDULE-PO_ITEM = '00010'.
  IT_SCHEDULE-SCHED_LINE = '0002'."
  IT_SCHEDULE-DEL_DATCAT_EXT = 'D'.

  IT_SCHEDULE-DELIVERY_DATE = '20190110'."交货日期
  IT_SCHEDULE-PO_DATE = '20190110'.
  IT_SCHEDULE-QUANTITY = '50'."计划数量
  APPEND IT_SCHEDULE.

  IT_SCHEDULEX-PO_ITEM = '00010'.
  IT_SCHEDULEX-SCHED_LINE = '0002'."
  IT_SCHEDULEX-SCHED_LINEX = 'X'.
  IT_SCHEDULEX-DEL_DATCAT_EXT = 'X'.
  IT_SCHEDULEX-PO_DATE = 'X'.
  IT_SCHEDULEX-DELIVERY_DATE = 'X'."交货日期
  IT_SCHEDULEX-QUANTITY = 'X'."计划数量
  APPEND IT_SCHEDULEX.

  "如果有采购申请，需要执行该程序两次
*  SET UPDATE TASK LOCAL.
  CALL FUNCTION 'BAPI_PO_CHANGE'
    EXPORTING
      PURCHASEORDER = L_NUMBER
    TABLES
      POSCHEDULE    = IT_SCHEDULE[]
      POSCHEDULEX   = IT_SCHEDULEX[]
      RETURN        = IT_SCHEDULE_RETURN[].

  LOOP AT IT_SCHEDULE_RETURN WHERE TYPE = 'E'.
    WRITE:/ '采购计划行。 消息类型', IT_SCHEDULE_RETURN-TYPE ,'消息文本',IT_SCHEDULE_RETURN-MESSAGE.
  ENDLOOP.
  READ TABLE IT_SCHEDULE_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    WRITE:/ '采购计划行创建成功！采购订单号为：',L_NUMBER.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
*    COMMIT WORK.
  ENDIF.
ENDIF.


IF R4 = 'X'. "创建物料主数据
  DATA:WA_HEADDATA            TYPE BAPIMATHEAD,
       WA_MARA                TYPE  BAPI_MARA,
       WA_MARAX               TYPE BAPI_MARAX,
       IT_MATERIALDESCRIPTION TYPE  STANDARD TABLE OF BAPI_MAKT WITH HEADER LINE,
       WA_MATERIAL_RETURN     TYPE BAPIRET2,
       WA_MARC                TYPE BAPI_MARC,
       WA_MARCX               TYPE BAPI_MARCX,
       IT_RETURNMESSAGES      TYPE STANDARD TABLE OF BAPI_MATRETURN2 WITH HEADER LINE,
       IT_MARM                TYPE STANDARD TABLE OF BAPI_MARM WITH HEADER LINE,
       IT_MARMX               TYPE STANDARD TABLE OF BAPI_MARMX WITH HEADER LINE.

  WA_HEADDATA-MATERIAL = 'MATERIAL_001'. "物料名称
  WA_HEADDATA-IND_SECTOR = 'M'. "行业领域
  WA_HEADDATA-MATL_TYPE = 'Z002'. "物料类型
  WA_HEADDATA-BASIC_VIEW = 'X'. "基本试图
  WA_HEADDATA-SALES_VIEW = 'X'. "销售试图
  WA_HEADDATA-PURCHASE_VIEW = 'X'. "采购试图
*  WA_HEADDATA-MRP_VIEW = 'X'. "物料需求计划(MRP)视图
  WA_HEADDATA-FORECAST_VIEW = 'X'. "预测视图
  WA_HEADDATA-WORK_SCHED_VIEW = 'X'. "工作计划视图
  WA_HEADDATA-PRT_VIEW = 'X'. "生产资源/工具(PRT)视图
  WA_HEADDATA-STORAGE_VIEW = 'X'. "存储视图
  WA_HEADDATA-WAREHOUSE_VIEW = 'X'. "仓库管理视图
  WA_HEADDATA-QUALITY_VIEW = 'X'. "质量管理视图
*  WA_HEADDATA-ACCOUNT_VIEW = 'X'. "会计视图
*  WA_HEADDATA-COST_VIEW = 'X'. "成本视图

  WA_MARA-MATL_GROUP = '10101'."采购组织
  WA_MARA-BASE_UOM = 'ST'."基本单位
  WA_MARA-NET_WEIGHT = '10'."净重
  WA_MARA-UNIT_OF_WT = 'KG'."单位
  WA_MARA-TRANS_GRP = '0001'."运输组

  WA_MARAX-MATL_GROUP = 'X'."采购组织
  WA_MARAX-BASE_UOM = 'X'."基本单位
  WA_MARAX-NET_WEIGHT = 'X'."净重
  WA_MARAX-UNIT_OF_WT = 'X'."单位
  WA_MARAX-TRANS_GRP = 'X'."运输组

  IT_MARM-ALT_UNIT = 'ST'.
*  IT_MARM-ALT_UNIT_ISO = ''.
  IT_MARM-GROSS_WT = '11'. "毛总
  APPEND  IT_MARM.

  IT_MARMX-ALT_UNIT = 'ST'.
  IT_MARMX-GROSS_WT = 'X'.
  APPEND  IT_MARMX.

  WA_MARC-PLANT = '1101'."工厂
  "WA_MARC-MATFRGTGRP = '1101'."运输组
  WA_MARC-LOADINGGRP = '1000'."装载组
  WA_MARC-PROFIT_CTR = 'PC1101'."利润中心
  WA_MARC-AVAILCHECK = '01'. "可用性检查
  WA_MARC-DEP_REQ_ID = '1'."  独立集中个别标识

  WA_MARCX-PLANT = '1101'."工厂
  "WA_MARCX-MATFRGTGRP = 'X'."运输组
  WA_MARCX-LOADINGGRP = 'X'."装载组
  WA_MARCX-PROFIT_CTR = 'X'."利润中心
  WA_MARCX-AVAILCHECK = 'X'. "可用性检查
  WA_MARCX-DEP_REQ_ID = 'X'."  独立集中个别标识

  REFRESH IT_MATERIALDESCRIPTION.
  IT_MATERIALDESCRIPTION-LANGU = SY-LANGU.
  IT_MATERIALDESCRIPTION-MATL_DESC = 'BAPI 创建物料描述'.
  APPEND IT_MATERIALDESCRIPTION.

  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      HEADDATA            = WA_HEADDATA
      CLIENTDATA          = WA_MARA
      CLIENTDATAX         = WA_MARAX
      PLANTDATA           = WA_MARC
      PLANTDATAX          = WA_MARCX
    IMPORTING
      RETURN              = WA_MATERIAL_RETURN
    TABLES
      UNITSOFMEASURE      = IT_MARM
      UNITSOFMEASUREX     = IT_MARMX
      MATERIALDESCRIPTION = IT_MATERIALDESCRIPTION[]
      RETURNMESSAGES      = IT_RETURNMESSAGES[].

  READ TABLE IT_RETURNMESSAGES TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    WRITE:/ '物料组数据创建成功！'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    LOOP AT IT_RETURNMESSAGES.
      WRITE:'创建物料主数据失败',IT_RETURNMESSAGES-MESSAGE.
    ENDLOOP.
  ENDIF.

ENDIF.

IF R5 = 'X'.
  DATA:IT_TIMETICKET TYPE STANDARD TABLE OF BAPI_PP_TIMETICKET WITH HEADER LINE,
       IT_RETUNR     TYPE STANDARD TABLE OF BAPI_CORU_RETURN WITH HEADER LINE,
       WA_RETURN     TYPE BAPIRET1.

  "工作中心不正确可以导入，要校验工作中心 TECO系统回自动报错
  IT_TIMETICKET-ORDERID = '001300000003'."订单号
  IT_TIMETICKET-OPERATION = '0010'."操作/活动编号
  IT_TIMETICKET-POSTG_DATE = SY-DATUM."过账日期
  IT_TIMETICKET-PLANT = '1101'."工厂
  IT_TIMETICKET-WORK_CNTR = '11011101'."工作中心 11011101
  IT_TIMETICKET-YIELD = '1'."待确认的产量
  IT_TIMETICKET-SCRAP = '1'."要确认的废品
  IT_TIMETICKET-REWORK = '1'."当前确认返工数量
  IT_TIMETICKET-CONF_QUAN_UNIT = 'ST'."要确认作业的计量单位 单位不能错误 错误会提示A类消息 但是可以不填写
  IT_TIMETICKET-FIN_CONF = ''."部分确认 空位部分确认  X最后确认  1自动最后确认
  IT_TIMETICKET-CONF_ACTIVITY1 = '1'."人工工时
  IT_TIMETICKET-CONF_ACTI_UNIT1 = 'MIN'."人工工时单位
  IT_TIMETICKET-CONF_ACTIVITY2 = '1'."机器工时
  IT_TIMETICKET-CONF_ACTI_UNIT2 = 'MIN'."机器工时单位
  IT_TIMETICKET-CONF_ACTIVITY3 = '1'."其他辅助工时
  IT_TIMETICKET-CONF_ACTI_UNIT3 = 'MIN'."其他辅助工时单位

*IT_TIMETICKET-PERS_NO = '184632'."人员编号
  APPEND IT_TIMETICKET.

  IT_TIMETICKET-ORDERID = '001300000003'."订单号 已TECO 001100000681
  IT_TIMETICKET-OPERATION = '0010'."操作/活动编号
  IT_TIMETICKET-POSTG_DATE = SY-DATUM."过账日期
  IT_TIMETICKET-PLANT = '1101'."工厂
  IT_TIMETICKET-WORK_CNTR = '11011102'."工作中心 11011101
  IT_TIMETICKET-YIELD = '2'."待确认的产量
  IT_TIMETICKET-SCRAP = '2'."要确认的废品
  IT_TIMETICKET-REWORK = '2'."当前确认返工数量
  IT_TIMETICKET-CONF_QUAN_UNIT = 'ST'."要确认作业的计量单位
  IT_TIMETICKET-FIN_CONF = ''."部分确认 空位部分确认  X最后确认  1自动最后确认

  IT_TIMETICKET-CONF_ACTIVITY1 = '2'."人工工时
  IT_TIMETICKET-CONF_ACTI_UNIT1 = 'MIN'."人工工时单位

  IT_TIMETICKET-CONF_ACTIVITY2 = '2'."机器工时
  IT_TIMETICKET-CONF_ACTI_UNIT2 = 'MIN'."机器工时单位

  IT_TIMETICKET-CONF_ACTIVITY3 = '2'."其他辅助工时
  IT_TIMETICKET-CONF_ACTI_UNIT3 = 'MIN'."其他辅助工时单位

*IT_TIMETICKET-PERS_NO = '184632'."人员编号
  APPEND IT_TIMETICKET.

*  SET UPDATE TASK LOCAL.
  CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT'
*    EXPORTING
*     TESTRUN       = 'X' "测试运用标识
    IMPORTING
      RETURN        = WA_RETURN
    TABLES
      TIMETICKETS   = IT_TIMETICKET
      DETAIL_RETURN = IT_RETUNR.

  READ TABLE IT_RETUNR TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*    ROLLBACK WORK.
  ELSE.
*    COMMIT WORK.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    LOOP AT IT_RETUNR ASSIGNING FIELD-SYMBOL(<WA_RETURN>).
    ENDLOOP.
  ENDIF.
ENDIF.

IF R6 = 'X'.
  DATA:WA_SO_HEAD  TYPE BAPISDHD1,
       WA_SO_HEADX TYPE BAPISDHD1X,
       L_VBELN     TYPE VBAK-VBELN.

  DATA:IT_SALES_ITEM        TYPE STANDARD TABLE OF BAPISDITM WITH HEADER LINE,
       IT_SALES_ITEMX       TYPE STANDARD TABLE OF BAPISDITMX WITH HEADER LINE,
       IT_SALES_RETURN      TYPE STANDARD TABLE OF BAPIRET2  WITH HEADER LINE,
       IT_SALES_PARTNERS    TYPE STANDARD TABLE OF BAPIPARNR WITH HEADER LINE,
       IT_SALES_SCHEDULES   TYPE STANDARD TABLE OF BAPISCHDL WITH HEADER LINE,
       IT_SALES_SCHEDULESX  TYPE STANDARD TABLE OF BAPISCHDLX WITH HEADER LINE,
       IT_SALES_CONDITIONS  TYPE STANDARD TABLE OF BAPICOND WITH HEADER LINE,
       IT_SALES_CONDITIONSX TYPE STANDARD TABLE OF BAPICONDX WITH HEADER LINE.

  WA_SO_HEAD-DOC_TYPE = 'ZOR1'."销售订单类型 正式订单内销
*  WA_SO_HEAD-SALES_ORG = ''."销售组织
*  WA_SO_HEAD-DISTR_CHAN = ''."分销渠道
*  WA_SO_HEAD-DIVISION = ''."产品组
*  WA_SO_HEAD-SALES_GRP = ''."销售组
*  WA_SO_HEAD-REQ_DATE_H = ''."要求的交货日期
*  WA_SO_HEAD-PMNTTRMS = ''."付款条件
*  WA_SO_HEAD-PYMT_METH = ''."付款方式
*  WA_SO_HEAD-ORD_REASON = '100'."订货原因
*  WA_SO_HEADX-ORD_REASON = 'X'."订货原因
  WA_SO_HEADX-DOC_TYPE = 'X'.

  IT_SALES_ITEM-ITM_NUMBER = '000010'."销售项目号
  IT_SALES_ITEM-MATERIAL = '000000102011000001'."
  IT_SALES_ITEM-BATCH = '1709250023'."批次
  IT_SALES_ITEM-SALES_UNIT = 'ST'. "销售单位
*  T_SALES_ITEM- = ''."
  APPEND  IT_SALES_ITEM.

  IT_SALES_ITEMX-ITM_NUMBER = '000010'."销售项目号
  IT_SALES_ITEMX-UPDATEFLAG = 'X'."销售项目号
  IT_SALES_ITEMX-MATERIAL = 'X'."
  IT_SALES_ITEMX-BATCH = 'X'."批次
  IT_SALES_ITEMX-SALES_UNIT = 'X'."销售单位
  APPEND  IT_SALES_ITEMX.

  "销售伙伴
  IT_SALES_PARTNERS-PARTN_ROLE = 'WE'."送达方
  IT_SALES_PARTNERS-PARTN_NUMB = 'A6581'."
*  IT_SALES_PARTNERS-ITM_NUMBER = '000010'."
  APPEND IT_SALES_PARTNERS.

  IT_SALES_PARTNERS-PARTN_ROLE = 'SP'."售达方
  IT_SALES_PARTNERS-PARTN_NUMB = 'A6581'."
*  IT_SALES_PARTNERS-ITM_NUMBER = '000010'."
  APPEND IT_SALES_PARTNERS.

  "交货计划行
  IT_SALES_SCHEDULES-ITM_NUMBER = '000010'."销售订单行
  IT_SALES_SCHEDULES-SCHED_LINE = '0001'."销售订单行
  IT_SALES_SCHEDULES-REQ_DATE = SY-DATUM."计划行日期
*  IT_SALES_SCHEDULES-DATE_TYPE = '1'."日期类型 1 = D
  IT_SALES_SCHEDULES-REQ_QTY = '10'."以销售单位计的订单数量
  APPEND IT_SALES_SCHEDULES.

  IT_SALES_SCHEDULESX-ITM_NUMBER = '000010'."销售订单行
  IT_SALES_SCHEDULESX-SCHED_LINE = '0001'."销售订单行
  IT_SALES_SCHEDULESX-UPDATEFLAG = 'X'."更新标识
  IT_SALES_SCHEDULESX-REQ_DATE = 'X'."计划行日期
*  IT_SALES_SCHEDULESX-DATE_TYPE = 'X'."日期类型
  IT_SALES_SCHEDULESX-REQ_QTY = 'X'."以销售单位计的订单数量
  APPEND IT_SALES_SCHEDULESX.

*  IT_SALES_CONDITIONS-ITM_NUMBER = '000010'."条件项目号
*  IT_SALES_CONDITIONS-COND_TYPE = 'PR11'."条件类型
*  IT_SALES_CONDITIONS-COND_VALUE = '10'."条件金额
*  APPEND IT_SALES_CONDITIONS.
*
*  IT_SALES_CONDITIONSX-ITM_NUMBER = '000010'.
*  IT_SALES_CONDITIONSX-COND_TYPE = 'X'."条件类型
*  IT_SALES_CONDITIONSX-COND_VALUE = 'X'."条件金额
*  APPEND IT_SALES_CONDITIONSX.

  CALL FUNCTION 'SD_SALESDOCUMENT_CREATE'
    EXPORTING
      SALES_HEADER_IN      = WA_SO_HEAD
      SALES_HEADER_INX     = WA_SO_HEADX
*     TESTRUN              = 'X' "测试运行标识
    IMPORTING
      SALESDOCUMENT_EX     = L_VBELN
    TABLES
      SALES_ITEMS_IN       = IT_SALES_ITEM[]
      SALES_ITEMS_INX      = IT_SALES_ITEMX[]
      SALES_PARTNERS       = IT_SALES_PARTNERS[]
      SALES_SCHEDULES_IN   = IT_SALES_SCHEDULES[]
      SALES_SCHEDULES_INX  = IT_SALES_SCHEDULESX[]
      SALES_CONDITIONS_IN  = IT_SALES_CONDITIONS[]
      SALES_CONDITIONS_INX = IT_SALES_CONDITIONSX[]
      RETURN               = IT_SALES_RETURN[].
  READ TABLE IT_SALES_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    LOOP AT  IT_SALES_RETURN ASSIGNING FIELD-SYMBOL(<WA_SALES_RETURB>) WHERE TYPE = 'E' OR TYPE = 'A'.
      WRITE:/ <WA_SALES_RETURB>-ID ,<WA_SALES_RETURB>-NUMBER , <WA_SALES_RETURB>-MESSAGE.
    ENDLOOP.
  ELSE.
    READ TABLE IT_SALES_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'A'.
    IF SY-SUBRC = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      LOOP AT  IT_SALES_RETURN ASSIGNING FIELD-SYMBOL(<WA_SALES_RETURB2>) WHERE TYPE = 'E' OR TYPE = 'A'.
        WRITE:/ <WA_SALES_RETURB2>-ID ,<WA_SALES_RETURB2>-NUMBER , <WA_SALES_RETURB2>-MESSAGE.
      ENDLOOP.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.
      WRITE:/ '销售订单创建成功',L_VBELN.
    ENDIF.
  ENDIF.
ENDIF.


IF R7 = 'X'.
  DATA:L_DELIVERY_FLAG TYPE C VALUE 'X',
       L_BILLING_FLAG  TYPE C.

  IF L_DELIVERY_FLAG = 'X'.
                                                            "200002614
    DATA:L_DELIVERY TYPE LIKP-VBELN.
    DATA:IT_DELIVERY_SO_ITEM TYPE STANDARD TABLE OF  BAPIDLVREFTOSALESORDER WITH HEADER LINE,
         IT_DELIVERY_RETURN  TYPE STANDARD TABLE OF BAPIRET2 WITH  HEADER LINE,
         IT_CREATED_ITEMS    TYPE STANDARD TABLE OF BAPIDLVITEMCREATED WITH HEADER LINE,
         IT_BILL_SUCCESS     TYPE STANDARD TABLE OF BAPIVBRKSUCCESS WITH HEADER LINE.

    IT_DELIVERY_SO_ITEM-REF_DOC = '0200002618'."参考凭证
    IT_DELIVERY_SO_ITEM-REF_ITEM = '000010'."参考凭证
    IT_DELIVERY_SO_ITEM-DLV_QTY = '1'."实际交货数量 10
    IT_DELIVERY_SO_ITEM-SALES_UNIT = 'ST'."销售单位
    APPEND IT_DELIVERY_SO_ITEM.

*  IT_CREATED_ITEMS-REF_DOC = '0200002614'.
*  IT_CREATED_ITEMS-REF_ITEM = '000010'.
*  IT_CREATED_ITEMS-MATERIAL = '000000102011000001'.
*  IT_CREATED_ITEMS-SALES_UNIT = 'ST'.
*  IT_CREATED_ITEMS-DLV_QTY = '1'.
*  APPEND IT_CREATED_ITEMS.

    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CREATE_SLS'
      EXPORTING
        SHIP_POINT        = '1101'
        DUE_DATE          = '20190618' "要去取消该参数的传递不让回报VL248 可以输入值，但是不能小于销售订单计划行的值日期
      IMPORTING
        DELIVERY          = L_DELIVERY
      TABLES
        SALES_ORDER_ITEMS = IT_DELIVERY_SO_ITEM[]
        CREATED_ITEMS     = IT_CREATED_ITEMS[]
        RETURN            = IT_DELIVERY_RETURN[].

    READ TABLE IT_DELIVERY_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
    IF SY-SUBRC = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      LOOP AT  IT_DELIVERY_RETURN ASSIGNING FIELD-SYMBOL(<WA_DELIVERY_RETURB>) WHERE TYPE = 'E' OR TYPE = 'A'.
        WRITE:/ <WA_DELIVERY_RETURB>-ID ,<WA_DELIVERY_RETURB>-NUMBER , <WA_DELIVERY_RETURB>-MESSAGE.
      ENDLOOP.
    ELSE.
      READ TABLE IT_SALES_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'A'.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        LOOP AT  IT_DELIVERY_RETURN ASSIGNING FIELD-SYMBOL(<WA_DELIVERY_RETURB2>) WHERE TYPE = 'E' OR TYPE = 'A'.
          WRITE:/ <WA_DELIVERY_RETURB2>-ID ,<WA_DELIVERY_RETURB2>-NUMBER , <WA_DELIVERY_RETURB2>-MESSAGE.
        ENDLOOP.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            WAIT = 'X'.
        WRITE:/ '交货单创建成功',L_DELIVERY.
      ENDIF.
    ENDIF.
    WAIT UP TO 10 SECONDS.
  ENDIF.


  IF L_BILLING_FLAG = 'X'.
    DATA:I_VBKOK      TYPE VBKOK,
         EF_ERROR_ANY TYPE XFELD,
         I_VBPOK_TAB  TYPE STANDARD TABLE OF VBPOK WITH HEADER LINE.

    I_VBKOK-VBELN_VL        = '0600004494'.        "交货单号
    I_VBKOK-WABUC           = 'X'.            "自动过帐货物移动
    I_VBKOK-WADAT_IST       = SY-DATUM.   "实际交货日期

    I_VBPOK_TAB-VBELN_VL    = '0600004494'.      "DELIVERY NUMBER
    I_VBPOK_TAB-POSNR_VL    = '000010'.
    I_VBPOK_TAB-VBELN       = '0200002618'."销售订单
    I_VBPOK_TAB-POSNN       = '000010'."销售订单行项目
    I_VBPOK_TAB-MATNR       = '000000102011000001'."物料
    I_VBPOK_TAB-PIKMG       = '1' ."交货数量
    APPEND I_VBPOK_TAB.

    "自动拣配过账
    CALL FUNCTION 'WS_DELIVERY_UPDATE'
      EXPORTING
        VBKOK_WA       = I_VBKOK
        COMMIT         = 'X'
        DELIVERY       = '0600004494'
        UPDATE_PICKING = 'X'
      IMPORTING
        EF_ERROR_ANY_0 = EF_ERROR_ANY
      TABLES
        VBPOK_TAB      = I_VBPOK_TAB[]
      EXCEPTIONS
        ERROR_MESSAGE  = 1
        OTHERS         = 2.
    IF SY-SUBRC <> 0.
      WRITE:/ '自动创建交货过账失败！'.
      MESSAGE 'fail' TYPE 'I'.
    ELSE.
      WRITE:/ '自动创建交货过账成功！'.
    ENDIF.
  ENDIF.
ENDIF.

IF R8 = 'X'.
  "https://blog.csdn.net/champaignwolf/article/details/80994513 自动拣配过账
  DATA:WA_CREATORDATAIN TYPE BAPICREATORDATA.
  DATA:IT_BILL_ITEM   TYPE STANDARD TABLE OF BAPIVBRK WITH HEADER LINE,
       IT_BILL_RETURN TYPE STANDARD TABLE OF BAPIRET1 WITH HEADER LINE.

  WA_CREATORDATAIN-CREATED_BY = SY-UNAME."创建人
  WA_CREATORDATAIN-CREATED_ON = SY-DATUM."记录建立日期

*  IT_BILL_ITEM-ORDBILLTYP = 'ZF2'."开票类型
  IT_BILL_ITEM-REF_DOC = '0600004493'."参考单据
*  IT_BILL_ITEM-REF_ITEM = '000010'."参考单据项目号
*  IT_BILL_ITEM-PAYER = 'A6581'."付款方
  IT_BILL_ITEM-REF_DOC_CA = 'J'. "先前凭证类别
*  IT_BILL_ITEM-DOC_NUMBER = '0200002616'."销售订单
*  IT_BILL_ITEM-ITM_NUMBER = '000010'."销售订单行项目
*  IT_BILL-COSTCENTER = ''."成本中心
*  IT_BILL_ITEM-DOC_TYPE = 'ZOR1'."销售凭证类型
*  IT_BILL_ITEM-SALES_UNIT = ''."销售单位
*  IT_BILL_ITEM-MATERIAL = ''."物料编码
*  IT_BILL_ITEM-REQ_QTY = ''."数量
  APPEND IT_BILL_ITEM.

  CALL FUNCTION 'BAPI_BILLINGDOC_CREATEMULTIPLE'
    EXPORTING
      CREATORDATAIN = WA_CREATORDATAIN
      TESTRUN       = 'X'
    TABLES
      BILLINGDATAIN = IT_BILL_ITEM[]
      RETURN        = IT_BILL_RETURN[]
      SUCCESS       = IT_BILL_SUCCESS[].

  READ TABLE IT_BILL_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    LOOP AT  IT_BILL_RETURN ASSIGNING FIELD-SYMBOL(<WA_BILL_RETURB>) WHERE TYPE = 'E' OR TYPE = 'A'.
      WRITE:/ <WA_BILL_RETURB>-ID ,<WA_BILL_RETURB>-NUMBER , <WA_BILL_RETURB>-MESSAGE.
    ENDLOOP.
  ELSE.
    READ TABLE IT_BILL_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'A'.
    IF SY-SUBRC = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      LOOP AT  IT_BILL_RETURN ASSIGNING FIELD-SYMBOL(<WA_BILL_RETURB2>) WHERE TYPE = 'E' OR TYPE = 'A'.
        WRITE:/ <WA_BILL_RETURB2>-ID ,<WA_BILL_RETURB2>-NUMBER , <WA_BILL_RETURB2>-MESSAGE.
      ENDLOOP.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.
      READ TABLE IT_BILL_SUCCESS ASSIGNING FIELD-SYMBOL(<WA_BILL_SUCCESS>) INDEX 1.
      IF SY-SUBRC = 0.
        WRITE:/ '交货单过账创建成功',<WA_BILL_SUCCESS>-BILL_DOC.
      ENDIF.
    ENDIF.
  ENDIF.
ENDIF.



IF R9 = 'X'.
  DATA:WA_ORDERDATA    TYPE BAPI_PP_ORDER_CREATE,
       WA_ORDER_RETURN TYPE BAPIRET2,
       L_ORDER         TYPE BAPI_ORDER_KEY-ORDER_NUMBER.

  WA_ORDERDATA-MATERIAL = '000000102011000001'."物料
  WA_ORDERDATA-PLANT = '1101'."生产工厂
  WA_ORDERDATA-PLANNING_PLANT = '1101'."生产计划工厂
  WA_ORDERDATA-ORDER_TYPE = 'ZY04'."
  WA_ORDERDATA-BASIC_START_DATE = SY-DATUM."基本开始日期
  WA_ORDERDATA-BASIC_END_DATE = SY-DATUM + 10."基本完成日期
  WA_ORDERDATA-QUANTITY = '100'."订单数量

  CALL FUNCTION 'BAPI_PRODORD_CREATE'
    EXPORTING
      ORDERDATA    = WA_ORDERDATA
    IMPORTING
      RETURN       = WA_ORDER_RETURN
      ORDER_NUMBER = L_ORDER.
  IF WA_ORDER_RETURN-TYPE = 'E' OR WA_ORDER_RETURN-TYPE = 'A'.
    WRITE:/ '生产订单创建失败' , WA_ORDER_RETURN-ID, WA_ORDER_RETURN-NUMBER,WA_ORDER_RETURN-MESSAGE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    WRITE:/ '生产订单创建成功' ,L_ORDER.
  ENDIF.
ENDIF.

IF R10 = 'X'.
  CALL FUNCTION 'RFC_CVI_EI_INBOUND_MAIN'.
ENDIF.


IF R11 = 'X'.
  "连接配置
  "MSSQL_SERVER=172.16.7.139,1433  MSSQL_DBNAME=Kute_XT

  DATA:IT_ITEM TYPE STANDARD TABLE OF ZEMPLOYEE WITH HEADER LINE.
  CONSTANTS:CNS_YGJK TYPE C LENGTH 10 VALUE 'CONN_SQL'.

  EXEC SQL.
    CONNECT TO :cns_ygjk
  ENDEXEC.
  EXEC SQL.
    SET CONNECTION :cns_ygjk
  ENDEXEC.

  "执行删除
  IT_ITEM-ZNUM_PER = '1'.
  EXEC SQL.
    delete employee where id = :it_item-znum_per
  ENDEXEC.

  "执行查询
*EXEC SQL PERFORMING PF_GET_RS.
*  SELECT
*  name,
*  sex
*    INTO  :IT_ITEM-zname,
*         :IT_ITEM-zsex
*  FROM employee
*ENDEXEC.
*
*
*FORM PF_GET_RS.
*  IT_ITEM-ZAGE = IT_ITEM-ZSEX.
*  APPEND IT_ITEM.
*  CLEAR IT_ITEM.
*  BREAK-POINT .
*ENDFORM.
ENDIF.

IF R12 = 'X'.
  DATA:L_OBJNR TYPE COBRA-OBJNR VALUE 'OR005100001668'.
  DATA IT_OBJNR TYPE STANDARD TABLE OF IONRB WITH HEADER LINE.
  DATA IT_COBRA TYPE STANDARD TABLE OF COBRA WITH HEADER LINE.
  DATA IT_COBRB TYPE STANDARD TABLE OF COBRB WITH HEADER LINE.
*.COBRA-BUFFER (SEE FM KOBS)
  TYPES:  BEGIN OF TY_COBRA_BUF.
            INCLUDE STRUCTURE COBRA.
            TYPES: UFLAG LIKE DKOBR-UPD_FLAG,
          END OF TY_COBRA_BUF.

*.COBRB-PUFFER MIT ?NDERUNGSFLAG (SEE FM KOBS)
  TYPES:  BEGIN OF TY_COBRB_BUF.
            INCLUDE STRUCTURE COBRB.
            TYPES: UFLAG LIKE DKOBR-UPD_FLAG,
          END OF TY_COBRB_BUF.

  DATA L_MEM_COBRA TYPE STANDARD TABLE OF TY_COBRA_BUF WITH HEADER LINE.
  DATA L_MEM_COBRB TYPE STANDARD TABLE OF TY_COBRB_BUF WITH HEADER LINE.

  CALL FUNCTION 'K_SETTLEMENT_RULE_EXISTENCE'
    EXPORTING
      OBJNR          = L_OBJNR
*     FLG_LOCAL      = ' '
* IMPORTING
*     E_COBRA        =
    EXCEPTIONS
      RULE_NOT_FOUND = 1
      OTHERS         = 2.
  IF SY-SUBRC = 0.
    MESSAGE '数据存在' TYPE 'I'.
  ELSE.

    CALL FUNCTION 'K_SRULE_CREATE'
      EXPORTING
        I_OBJNR             = L_OBJNR
*       I_CHECK_ONLY_LOCAL  = ' '
*   IMPORTING
*       E_COBRA             =
      EXCEPTIONS
        RULE_ALREADY_EXISTS = 1
        OTHERS              = 2.
    CALL FUNCTION 'K_SRULE_EXPORT_IMPORT'
      EXPORTING
        I_MODE     = 'EX'
      EXCEPTIONS
        WRONG_MODE = 1
        OTHERS     = 2.
    IMPORT L_MEM_COBRA L_MEM_COBRB FROM MEMORY ID 'K_SRULE'.
* 修改 IT_COBRA, IT_COBRB.
    CLEAR:L_MEM_COBRB,L_MEM_COBRB[].

    L_MEM_COBRB-OBJNR = L_OBJNR.
    L_MEM_COBRB-LFDNR = 1.
    L_MEM_COBRB-PERBZ = 'GES'."FUL "结算类型
    L_MEM_COBRB-PROZS = '100'. "百分比
    L_MEM_COBRB-DFREG = 'PMU'. "缺省规则
    L_MEM_COBRB-KONTY = 'KS'."G/L = SK "科目分配类别
    L_MEM_COBRB-KOKRS = 'KUSC'. "成本控制范围
    L_MEM_COBRB-BUKRS = '1100'. "公司代码
*  L_MEM_COBRB-HKONT = '9999999999'. "总帐科目
    L_MEM_COBRB-KOSTL = '110A090001'. "成本中心
    CONCATENATE L_MEM_COBRB-KONTY  L_MEM_COBRB-KOKRS L_MEM_COBRB-KOSTL INTO L_MEM_COBRB-REC_OBJNR1.
    L_MEM_COBRB-EXTNR = 1.
    L_MEM_COBRB-UFLAG = 'I'.
    APPEND L_MEM_COBRB.

    EXPORT L_MEM_COBRA L_MEM_COBRB TO MEMORY ID 'K_SRULE'.
    CALL FUNCTION 'K_SETTLEMENT_RULE_REFRESH'
      EXPORTING
        OBJNR = L_OBJNR.

    CALL FUNCTION 'K_SRULE_EXPORT_IMPORT'
      EXPORTING
        I_MODE     = 'IM'
      EXCEPTIONS
        WRONG_MODE = 1
        OTHERS     = 2.

    CALL FUNCTION 'K_SETTLEMENT_RULE_CHECK'
      EXPORTING
*       ADD_PARA          = ' '
*       APROF             = ' '
        OBJNR             = L_OBJNR
*       TEST_BUKRS        = ' '
*       TEST_KOKRS        = ' '
*       RWIN_AUFRUF       = 'X'
        I_PFLEGE          = 'X' "you can change the rule
*       IVPRO             = ' '
*       XREVENUE          = ' '
*       XFUNCSAVE         = ' '
* IMPORTING
*       XSAVE             =
      EXCEPTIONS
        ERROR_OCCURRED    = 1
        NO_RULE_FOR_OBJNR = 2
        WARNING_OCCURRED  = 3
        INTERNAL_PROBLEMS = 4
        OTHERS            = 5.

    IF SY-SUBRC = 0."保存结算规则，设置状态 SETC 结算规则己维护
      CALL FUNCTION 'K_SETTLEMENT_RULE_SAVE'
        EXPORTING
          DIALOG            = ''
          OBJNR             = L_OBJNR
          I_STATUS_UPDATE   = 'X'
        EXCEPTIONS
          NO_RULE_FOR_OBJNR = 1
          OTHERS            = 2.
      IF SY-SUBRC = 0.
        COMMIT WORK.
      ENDIF.

      DATA STATUS TYPE STANDARD TABLE OF JSTAT WITH HEADER LINE.
      STATUS-STAT = 'I0028'."SETC in table TJ02T 结算规则己维护
      STATUS-INACT = ''.
      APPEND STATUS.

      CALL FUNCTION 'STATUS_CHANGE_INTERN'
        EXPORTING
*         CHECK_ONLY          = ' '
*         CLIENT              = SY-MANDT
          OBJNR               = L_OBJNR
*         ZEILE               = ' '
*         SET_CHGKZ           =
*   IMPORTING
*         ERROR_OCCURRED      =
*         OBJECT_NOT_FOUND    =
*         STATUS_INCONSISTENT =
*         STATUS_NOT_ALLOWED  =
        TABLES
          STATUS              = STATUS
        EXCEPTIONS
          OBJECT_NOT_FOUND    = 1
          STATUS_INCONSISTENT = 2
          STATUS_NOT_ALLOWED  = 3
          OTHERS              = 4.
      IF SY-SUBRC = 0.
        CALL FUNCTION 'STATUS_UPDATE_ON_COMMIT'.
      ENDIF.
    ENDIF.
**************************************************
* 自动生成结算规则 结束 *
**************************************************


  ENDIF.
ENDIF.

IF R13 = 'X'.
  DATA:LS_HEADERDATA     TYPE BAPI_INCINV_CREATE_HEADER,
       INVOICEDOCNUMBER  TYPE BAPI_INCINV_FLD-INV_DOC_NO,
       FISCALYEAR        TYPE BAPI_INCINV_FLD-FISC_YEAR,
       L_AWKEY           TYPE BKPF-AWKEY,
       LT_ITEMDATA       TYPE STANDARD TABLE OF BAPI_INCINV_CREATE_ITEM WITH HEADER LINE,
       LT_RETURN         TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE,
       LT_ACCOUNTINGDATA TYPE STANDARD TABLE OF BAPI_INCINV_CREATE_ACCOUNT WITH HEADER LINE,
       LT_TAXDATA        TYPE STANDARD TABLE OF BAPI_INCINV_CREATE_TAX WITH HEADER LINE,
       L_ITEM            TYPE RBLGP.

  SELECT * INTO TABLE @DATA(IT_EKPO_INVOICE) FROM EKPO WHERE EBELN = '4500002151'.
  SELECT * INTO TABLE @DATA(IT_EKKO_INVOICE) FROM EKKO WHERE EBELN = '4500002151'.
  LOOP AT  IT_EKKO_INVOICE ASSIGNING FIELD-SYMBOL(<WA_EKKO_INVOICE>).

    LS_HEADERDATA-DOC_TYPE = 'RE'."凭证类型 发票
    LS_HEADERDATA-DOC_DATE = SY-DATUM."凭证日期
    LS_HEADERDATA-PSTNG_DATE = SY-DATUM."过账日期
    LS_HEADERDATA-COMP_CODE = <WA_EKKO_INVOICE>-BUKRS."公司
    LS_HEADERDATA-CURRENCY = <WA_EKKO_INVOICE>-WAERS."货币
*   LS_HEADERDATA-CALC_TAX_IND = 'X'."自动计算税金
    LS_HEADERDATA-DIFF_INV = <WA_EKKO_INVOICE>-LIFNR."供应商
    LS_HEADERDATA-PMNTTRMS = <WA_EKKO_INVOICE>-ZTERM."付款天剑
    LS_HEADERDATA-GROSS_AMOUNT = '56.50'."总金额
    LS_HEADERDATA-HEADER_TXT = '发票抬头文本！'."发票抬头文本
    LS_HEADERDATA-INVOICE_IND  = 'X'."标识记账发票

    LT_TAXDATA-TAX_CODE = 'JA'."税码
    LT_TAXDATA-TAX_AMOUNT = '6.50'."税额
    APPEND LT_TAXDATA.

    LOOP AT  IT_EKPO_INVOICE ASSIGNING FIELD-SYMBOL(<WA_EKPO_INVOICE>).
      L_ITEM = L_ITEM + 1.
      LT_ITEMDATA-INVOICE_DOC_ITEM = L_ITEM.
      LT_ITEMDATA-PO_NUMBER = <WA_EKPO_INVOICE>-EBELN."采购订单号
      LT_ITEMDATA-PO_ITEM = <WA_EKPO_INVOICE>-EBELP."采购订单行项目
      LT_ITEMDATA-TAX_CODE = 'JA'."税码
      LT_ITEMDATA-QUANTITY = <WA_EKPO_INVOICE>-MENGE."数量
      LT_ITEMDATA-PO_UNIT = <WA_EKPO_INVOICE>-MEINS."采购订单计量单位
      LT_ITEMDATA-ITEM_AMOUNT = <WA_EKPO_INVOICE>-NETWR /  <WA_EKPO_INVOICE>-PEINH."金额
      LT_ITEMDATA-REF_DOC = '5000005907'."物料凭证
      LT_ITEMDATA-REF_DOC_YEAR = '2020'."物料凭证年份
      IF <WA_EKPO_INVOICE>-EBELP = '00010'.
        LT_ITEMDATA-REF_DOC_IT = '0001'."物料凭证行项目
      ELSE.
        LT_ITEMDATA-REF_DOC_IT = '0002'."物料凭证行项目
      ENDIF.
      LT_ITEMDATA-PO_PR_UOM = <WA_EKPO_INVOICE>-BPRME."采购订单价格单位
      APPEND LT_ITEMDATA.
    ENDLOOP.

    CALL FUNCTION 'BAPI_INCOMINGINVOICE_CREATE'
      EXPORTING
        HEADERDATA       = LS_HEADERDATA
      IMPORTING
        INVOICEDOCNUMBER = INVOICEDOCNUMBER
        FISCALYEAR       = FISCALYEAR
      TABLES
        ITEMDATA         = LT_ITEMDATA
        ACCOUNTINGDATA   = LT_ACCOUNTINGDATA
        TAXDATA          = LT_TAXDATA
        RETURN           = LT_RETURN.
    READ TABLE LT_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
    IF SY-SUBRC = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      LOOP AT IT_RETUNR ASSIGNING FIELD-SYMBOL(<IT_RETURN_INVOICE>).
        WRITE:/ <IT_RETURN_INVOICE>-NUMBER,<IT_RETURN_INVOICE>-ID,<IT_RETURN_INVOICE>-MESSAGE.
      ENDLOOP.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          WAIT = 'X'.
      L_AWKEY = INVOICEDOCNUMBER && FISCALYEAR.
      SELECT SINGLE BELNR INTO @DATA(L_BELNR) FROM BKPF WHERE AWKEY = @L_AWKEY.
      WRITE:/ '发票创建成功:',INVOICEDOCNUMBER.
    ENDIF.

    CLEAR:L_ITEM,L_AWKEY,LS_HEADERDATA,INVOICEDOCNUMBER,LT_ITEMDATA,LT_ACCOUNTINGDATA,LT_TAXDATA,LT_RETURN.
    REFRESH:LT_ITEMDATA,LT_ACCOUNTINGDATA,LT_TAXDATA,LT_RETURN.
  ENDLOOP.
ENDIF.

IF R14 = 'X'.

  DATA:IT_OPERATIONS  TYPE STANDARD TABLE OF CPS_TASK_LIST_MAINT_OPR WITH HEADER LINE,
       IT_OPERATIONSX TYPE STANDARD TABLE OF CPS_TASK_LIST_MAINT_OPR_X WITH HEADER LINE,
       IT_RETURN      TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE.

  IT_OPERATIONS-MAINTAIN_MODE = 'M'.
  IT_OPERATIONS-FLAG_BAR_POINTER = '1'."对应 IT_OPERATIONSX 第几行
  IT_OPERATIONS-OPERATION_ID = '00000001'."plpo 节点或计算器字段，待确定
  IT_OPERATIONS-ACTIVITY = '0010'.
  IT_OPERATIONS-CONTROL_KEY = 'ZY01'.
  IT_OPERATIONS-PLANT = '1101'.
  IT_OPERATIONS-WORK_CNTR = '11010402'."工作中心
  IT_OPERATIONS-BASE_QUANTITY = '1'."基本数量
  IT_OPERATIONS-STD_VALUE_01 = '1'."基本人工
  IT_OPERATIONS-STD_VALUE_02 = '1'."基本机器
  IT_OPERATIONS-STD_VALUE_03 = '1'."基本其他
  IT_OPERATIONS-DESCRIPTION = '工序文本'.
  APPEND IT_OPERATIONS.

  IT_OPERATIONSX-ACTIVITY = 'X'.
  IT_OPERATIONSX-CONTROL_KEY = 'X'.
  IT_OPERATIONSX-PLANT = 'X'.
  IT_OPERATIONSX-DESCRIPTION = 'X'.
  IT_OPERATIONSX-WORK_CNTR = 'X'."工作中心
  IT_OPERATIONSX-BASE_QUANTITY = 'X'."基本数量
  IT_OPERATIONSX-STD_VALUE_01 = 'X'."基本人工
  IT_OPERATIONSX-STD_VALUE_02 = 'X'."基本机器
  IT_OPERATIONSX-STD_VALUE_03 = 'X'."基本其他
  APPEND IT_OPERATIONSX.

  CALL FUNCTION 'ROUTING_MAINTAIN'
    EXPORTING
      TASK_LIST_GROUP = '50003581'
      GROUP_COUNTER   = '01'
      MATERIAL        = '000000101010000050'
      PLANT           = '1101'
      KEY_DATE        = '20200228'
      CHANGE_NO       = ''
    TABLES
      OPERATIONS      = IT_OPERATIONS
      OPERATIONS_X    = IT_OPERATIONSX
      RETURN          = IT_RETURN.

  READ TABLE IT_RETURN WITH  KEY  TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    MESSAGE '数据更新失败！' TYPE 'S'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.

    MESSAGE '数据更新成功！' TYPE 'S'.
  ENDIF.
ENDIF.

IF R15 = 'X'.
  DATA:WA_POSTINGDATA    TYPE BAPIFAPO_GEN_INFO,
       WA_RETIREMENTDATA TYPE BAPIFAPO_RET,
       WA_DOCUMENT       TYPE BAPIFAPO_DOC_REF,
       WA_RETURN_ASSET   TYPE BAPIRET2.

  WA_POSTINGDATA-DOC_TYPE = 'AA'.
  WA_POSTINGDATA-DOC_DATE = '20191215'.
  WA_POSTINGDATA-PSTNG_DATE = '20191215'.
*wa_postingdata-trans_date = '20191215'.
  WA_POSTINGDATA-COMP_CODE = '1100'.
  WA_POSTINGDATA-ASSETMAINO = '001000000014'.
  WA_POSTINGDATA-ASSETSUBNO = '0000'.

  WA_RETIREMENTDATA-COMPL_RET = 'X'."记账全部报废
  WA_RETIREMENTDATA-VALUEDATE = '20191215'.

  CALL FUNCTION 'BAPI_ASSET_RETIREMENT_POST'
    EXPORTING
      GENERALPOSTINGDATA = WA_POSTINGDATA
      RETIREMENTDATA     = WA_RETIREMENTDATA
    IMPORTING
      DOCUMENTREFERENCE  = WA_DOCUMENT
      RETURN             = WA_RETURN_ASSET.
  IF WA_RETURN_ASSET-TYPE = 'E'.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.
ENDIF.

IF R16 = 'X'.
  DATA: WA_IBASE         TYPE IBCO2_IBASE_REC,
        WA_CONFIGURATION TYPE IBCO2_INSTANCE_TAB2,
        WA_VALUES        TYPE  IBCO2_INSTANCE_REC2.
  SELECT SINGLE * INTO @DATA(WA_MARC2) FROM MARC WHERE MATNR = '000000101010000016' AND WERKS = '1101'.
  CALL FUNCTION 'CUCB_GET_CONFIGURATION'
    EXPORTING
      INSTANCE      = WA_MARC2-CUOBJ
    IMPORTING
      IBASE         = WA_IBASE
      CONFIGURATION = WA_CONFIGURATION.
  IF SY-SUBRC = 0.
    READ TABLE WA_CONFIGURATION INTO WA_VALUES INDEX 1.
    IF SY-SUBRC = 0.
      READ TABLE WA_VALUES-VALUES ASSIGNING FIELD-SYMBOL(<WA_VALUE>) INDEX 1.
      IF SY-SUBRC = 0.
        WRITE:<WA_VALUE>-ATWRT.
      ENDIF.
    ENDIF.
  ENDIF.
ENDIF.

IF R17 = 'X'.
  DATA:L_MBLNR            TYPE MSEG-MBLNR,
       L_MJAHR            TYPE MSEG-MJAHR,
       WA_HEADER          TYPE BAPI2017_GM_HEAD_01,
       IT_GOODSMVT        TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE WITH HEADER LINE,
       IT_RETURN_PURCHASE TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE,
       WA_ZTGRMAPPING     TYPE ZTGRMAPPING,
       WA_ZTMAPPING_LOG   TYPE ZTMAPPING_LOG.

  WA_HEADER-PSTNG_DATE = SY-DATUM."凭证中的过账日期
  WA_HEADER-DOC_DATE = SY-DATUM."凭证中的凭证日期

  IT_GOODSMVT-MATERIAL = '000000302010000016'."
  IT_GOODSMVT-MATERIAL_LONG = '000000302010000016'."
  IT_GOODSMVT-PLANT = '8601'.
  IT_GOODSMVT-MVT_IND = 'B'."按采购订单收货
  IT_GOODSMVT-MOVE_TYPE = '101'."移动类型
  IT_GOODSMVT-PO_NUMBER = '4500002166'."采购订单号
  IT_GOODSMVT-PO_ITEM = '00010'."采购订单行项目
  IT_GOODSMVT-ENTRY_QNT = '12'."以录入项单位表示的数量
  IT_GOODSMVT-ENTRY_UOM = 'ST'."条目单位
  APPEND IT_GOODSMVT.
  CLEAR IT_GOODSMVT.

  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      GOODSMVT_HEADER  = WA_HEADER
      GOODSMVT_CODE    = '01' "采购订单收货
    IMPORTING
      MATERIALDOCUMENT = L_MBLNR
      MATDOCUMENTYEAR  = L_MJAHR
    TABLES
      GOODSMVT_ITEM    = IT_GOODSMVT[]
      RETURN           = IT_RETURN_PURCHASE[].
  READ TABLE IT_RETURN_PURCHASE TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    LOOP AT  IT_RETURN ASSIGNING FIELD-SYMBOL(<WA_RETURN_PURCHASE>) WHERE TYPE = 'E'.

    ENDLOOP.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.

ENDIF.

IF R18 = 'X'.
  DATA:HEADER_DATA    TYPE BAPIOBDLVHDRCHG,
       HEADER_CONTROL TYPE BAPIOBDLVHDRCTRLCHG,
       ITEM_DATA      TYPE STANDARD TABLE OF  BAPIOBDLVITEMCHG WITH HEADER LINE,
       ITEM_CONTROL   TYPE STANDARD TABLE OF BAPIOBDLVITEMCTRLCHG WITH HEADER LINE,
       RETURN         TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE,
       ITEM_DATA_SPL  TYPE STANDARD TABLE OF /SPE/BAPIOBDLVITEMCHG WITH HEADER LINE,
       L_LFIMG        TYPE LFIMG,
       L_MSG          TYPE STRING.

  HEADER_DATA-DELIV_NUMB = '0660000331'.
  HEADER_CONTROL-DELIV_NUMB = '0660000331'.

  SELECT * INTO TABLE @DATA(IT_LIPS_ITEM) FROM LIPS WHERE VBELN = '0660000331'.

  LOOP AT  IT_LIPS_ITEM ASSIGNING FIELD-SYMBOL(<WA_LIPS_ITEM>).
    ITEM_DATA-DELIV_NUMB = <WA_LIPS_ITEM>-VBELN."
    ITEM_DATA-DELIV_ITEM = <WA_LIPS_ITEM>-POSNR."
    ITEM_DATA-MATERIAL = <WA_LIPS_ITEM>-MATNR."
    ITEM_DATA-BATCH =  <WA_LIPS_ITEM>-CHARG."
    ITEM_DATA-DLV_QTY = <WA_LIPS_ITEM>-LFIMG.
    ITEM_DATA-DLV_QTY_IMUNIT = <WA_LIPS_ITEM>-LFIMG.
    IF <WA_LIPS_ITEM>-UECHA IS NOT INITIAL.
      ITEM_DATA-USEHIERITM = '1'."批次子项目
      ITEM_DATA-DLV_QTY = 0."实际交货数量
      ITEM_DATA-DLV_QTY_IMUNIT = 0.
    ENDIF.
    IF <WA_LIPS_ITEM>-POSNR < '900000'.
      ITEM_DATA-DLV_QTY = 0."实际交货数量
      ITEM_DATA-DLV_QTY_IMUNIT = 0.
    ENDIF.
    ITEM_DATA-FACT_UNIT_NOM = <WA_LIPS_ITEM>-UMVKZ.
    ITEM_DATA-FACT_UNIT_DENOM = <WA_LIPS_ITEM>-UMVKN.
    ITEM_DATA-HIERARITEM = <WA_LIPS_ITEM>-UECHA." 上层项目
    ITEM_DATA-BASE_UOM = <WA_LIPS_ITEM>-MEINS."基本单位
    ITEM_DATA-SALES_UNIT = <WA_LIPS_ITEM>-VRKME."销售单位
    ITEM_DATA-MATERIAL_LONG =  <WA_LIPS_ITEM>-MATNR."物料编号
    APPEND ITEM_DATA.
    CLEAR ITEM_DATA.

    ITEM_CONTROL-DELIV_NUMB = <WA_LIPS_ITEM>-VBELN."
    ITEM_CONTROL-DELIV_ITEM = <WA_LIPS_ITEM>-POSNR."
    ITEM_CONTROL-CHG_DELQTY = 'X'."
    APPEND ITEM_CONTROL.
    CLEAR:ITEM_CONTROL,L_LFIMG.
  ENDLOOP.

  CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
    EXPORTING
      HEADER_DATA    = HEADER_DATA
      HEADER_CONTROL = HEADER_CONTROL
      DELIVERY       = '0660000331'
    TABLES
      ITEM_DATA      = ITEM_DATA
      ITEM_CONTROL   = ITEM_CONTROL
      RETURN         = RETURN
      ITEM_DATA_SPL  = ITEM_DATA_SPL.
  READ TABLE RETURN TRANSPORTING NO FIELDS WITH KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    LOOP AT RETURN ASSIGNING FIELD-SYMBOL(<RETUNR>) WHERE TYPE = 'E'.
    ENDLOOP.
    RETURN.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.
ENDIF.

IF R19 = 'X'.
  DATA:WA_VBKOK_PICKING  TYPE VBKOK,
       VBPOK_TAB_PICKING TYPE STANDARD TABLE OF VBPOK WITH HEADER LINE,
       IT_PROT_PICKING   TYPE STANDARD TABLE OF PROTT WITH HEADER LINE,
       MESSAGE           TYPE STRING.

  WA_VBKOK_PICKING-VBELN_VL = '0660000331'.

  SELECT * INTO TABLE @DATA(IT_PACKING_LIPS) FROM LIPS
        WHERE VBELN = '0660000331'.

  LOOP AT IT_PACKING_LIPS ASSIGNING FIELD-SYMBOL(<WA_PACLING_LIPS>).

    VBPOK_TAB_PICKING-VBELN_VL   = <WA_PACLING_LIPS>-VBELN.
    VBPOK_TAB_PICKING-POSNR_VL  = <WA_PACLING_LIPS>-POSNR.
    VBPOK_TAB_PICKING-VBELN        = <WA_PACLING_LIPS>-VBELN.
    VBPOK_TAB_PICKING-POSNN      = <WA_PACLING_LIPS>-POSNR.
    VBPOK_TAB_PICKING-PIKMG       = 1.                      "实际已交货量（按销售单位）

    IF <WA_PACLING_LIPS>-POSNR < '900000'.
      VBPOK_TAB_PICKING-PIKMG       = 0.
    ENDIF.                "实际已交货量（按销售单位）
    VBPOK_TAB_PICKING-MEINS       = <WA_PACLING_LIPS>-MEINS. "基本计量单位
    VBPOK_TAB_PICKING-CHARG      = <WA_PACLING_LIPS>-CHARG.  "批次
    VBPOK_TAB_PICKING-MATNR     = <WA_PACLING_LIPS>-MATNR.   "物料

    APPEND VBPOK_TAB_PICKING.
    CLEAR:VBPOK_TAB_PICKING,L_LFIMG.
  ENDLOOP.

  "修改拣配数量
  CALL FUNCTION 'SD_DELIVERY_UPDATE_PICKING'
    EXPORTING
      VBKOK_WA      = WA_VBKOK_PICKING
      SYNCHRON      = 'X'
    TABLES
      VBPOK_TAB     = VBPOK_TAB_PICKING[]
      PROT          = IT_PROT_PICKING[]
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.
  IF SY-SUBRC = 0.
    IF IT_PROT_PICKING[] IS NOT INITIAL.
      STATUS = 'E'.
      MESSAGE =  MESSAGE &&  '更改交货单拣配（' && '0660000331' && ')数量失败！' .
      LOOP AT IT_PROT_PICKING ASSIGNING FIELD-SYMBOL(<WA_PROT_POCKING>) WHERE MSGTY = 'E'.
        CALL FUNCTION 'MESSAGE_TEXT_BUILD'
          EXPORTING
            MSGID               = <WA_PROT_POCKING>-MSGID
            MSGNR               = <WA_PROT_POCKING>-MSGNO
            MSGV1               = <WA_PROT_POCKING>-MSGV1
            MSGV2               = <WA_PROT_POCKING>-MSGV2
            MSGV3               = <WA_PROT_POCKING>-MSGV3
            MSGV4               = <WA_PROT_POCKING>-MSGV4
          IMPORTING
            MESSAGE_TEXT_OUTPUT = L_MSG.
        MESSAGE =  MESSAGE && L_MSG.
        CLEAR:L_MSG.
      ENDLOOP.
      RETURN.
    ELSE.
      COMMIT WORK.
    ENDIF.
  ELSE.
    ROLLBACK WORK.
  ENDIF.
ENDIF.

IF R20 = 'X'.
  DATA:WA_VBKOK TYPE VBKOK,
       IT_PROT  TYPE STANDARD TABLE OF PROTT WITH HEADER LINE,
       IT_VBPOK TYPE STANDARD TABLE OF VBPOK WITH HEADER LINE.

  SELECT * INTO TABLE @DATA(IT_LIPS) FROM LIPS WHERE VBELN = '0660000331'. "AND POSNR < 900000.

  WA_VBKOK-VBELN_VL = '0660000331'.
  WA_VBKOK-WABUC = 'X'."自动货物移动过账

  LOOP AT IT_LIPS ASSIGNING FIELD-SYMBOL(<WA_LIPS>).
    IT_VBPOK-VBELN_VL = <WA_LIPS>-VBELN.
    IT_VBPOK-POSNR_VL = <WA_LIPS>-POSNR.
    IT_VBPOK-VBELN    = <WA_LIPS>-VGBEL."参考凭证
    IT_VBPOK-POSNN    = <WA_LIPS>-VGPOS.
    IT_VBPOK-MATNR    = <WA_LIPS>-MATNR.
    IT_VBPOK-CHARG    = <WA_LIPS>-CHARG.
    IT_VBPOK-LFIMG    = <WA_LIPS>-LFIMG.
    IT_VBPOK-PIKMG = <WA_LIPS>-LFIMG.
    IT_VBPOK-MEINS    = <WA_LIPS>-MEINS."
    IT_VBPOK-LGORT    = <WA_LIPS>-LGORT.
    APPEND IT_VBPOK.
    CLEAR:L_LFIMG,IT_VBPOK.
  ENDLOOP.

  CALL FUNCTION 'WS_DELIVERY_UPDATE'
    EXPORTING
      VBKOK_WA      = WA_VBKOK
      SYNCHRON      = 'X'
      COMMIT        = 'X'
      DELIVERY      = '0660000331'
      NICHT_SPERREN = 'X'
    TABLES
      PROT          = IT_PROT
      VBPOK_TAB     = IT_VBPOK
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.
  IF SY-SUBRC = 0.
    IF IT_PROT[] IS NOT INITIAL.
      STATUS = 'E'.
      MESSAGE =  MESSAGE &&  '更改交货单（' && '0660000331' && ')过账失败！' .
      LOOP AT IT_PROT ASSIGNING FIELD-SYMBOL(<WA_PROT>) WHERE MSGTY = 'E'.
        CALL FUNCTION 'MESSAGE_TEXT_BUILD'
          EXPORTING
            MSGID               = <WA_PROT>-MSGID
            MSGNR               = <WA_PROT>-MSGNO
            MSGV1               = <WA_PROT>-MSGV1
            MSGV2               = <WA_PROT>-MSGV2
            MSGV3               = <WA_PROT>-MSGV3
            MSGV4               = <WA_PROT>-MSGV4
          IMPORTING
            MESSAGE_TEXT_OUTPUT = L_MSG.
        MESSAGE =  MESSAGE && L_MSG.
        CLEAR:L_MSG.
      ENDLOOP.
      RETURN.
    ELSE.
      COMMIT WORK.
    ENDIF.
  ELSE.
    ROLLBACK WORK.
  ENDIF.
ENDIF .

IF R21 = 'X'.
*  DATA:WA_CREATORDATAIN TYPE BAPICREATORDATA.
  DATA:"IT_BILL_ITEM    TYPE STANDARD TABLE OF BAPIVBRK WITH HEADER LINE,
*       IT_BILL_RETURN  TYPE STANDARD TABLE OF BAPIRET1 WITH HEADER LINE,
*       IT_BILL_SUCCESS TYPE STANDARD TABLE OF BAPIVBRKSUCCESS WITH HEADER LINE,
       IT_ERROR        TYPE STANDARD TABLE OF BAPIVBRKERRORS WITH HEADER LINE.

  WA_CREATORDATAIN-CREATED_BY = SY-UNAME."创建人
  WA_CREATORDATAIN-CREATED_ON = SY-DATUM."记录建立日期

  IT_BILL_ITEM-REF_DOC = '0660000331'."参考单据
  IT_BILL_ITEM-REF_DOC_CA = 'J'. "先前凭证类别
  APPEND IT_BILL_ITEM.

  CALL FUNCTION 'BAPI_BILLINGDOC_CREATEMULTIPLE'
    EXPORTING
      CREATORDATAIN = WA_CREATORDATAIN
      TESTRUN       = ''
*     POSTING       = ''
    TABLES
      ERRORS        = IT_ERROR[]
      BILLINGDATAIN = IT_BILL_ITEM[]
      RETURN        = IT_BILL_RETURN[]
      SUCCESS       = IT_BILL_SUCCESS[].
  READ TABLE IT_BILL_RETURN TRANSPORTING NO FIELDS WITH  KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    STATUS = 'E'.
    MESSAGE =  MESSAGE &&  '创建货单（' && '0660000331' && ')过账开票失败！' .
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    LOOP AT  IT_BILL_RETURN ASSIGNING FIELD-SYMBOL(<WA_BILL_RETURB3>) WHERE TYPE = 'E' OR TYPE = 'A'.
      MESSAGE =  MESSAGE && <WA_BILL_RETURB3>-MESSAGE.
    ENDLOOP.
    RETURN.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    READ TABLE IT_BILL_SUCCESS ASSIGNING FIELD-SYMBOL(<WA_BILL_SUCCESS3>) INDEX 1.
    IF SY-SUBRC = 0.
*      WRITE:/ '交货单过账创建成功',<WA_BILL_SUCCESS>-BILL_DOC.
      MESSAGE = <WA_BILL_SUCCESS3>-BILL_DOC.
    ENDIF.
  ENDIF.
ENDIF.

IF R22 = 'X'.
  DATA:IT_COMP                TYPE STANDARD TABLE OF BAPI_NETWORK_COMP_ADD WITH HEADER LINE,
       IT_MESS                TYPE STANDARD TABLE OF BAPI_METH_MESSAGE WITH HEADER LINE,
       WA_RETURN_NETWORK_COMP TYPE BAPIRET2,
       IT_RETURN_NETWORK_COMP TYPE STANDARD TABLE OF BAPIRET2,
       G_UPDATE_FLAY          TYPE C.
*  READ TABLE IT_PROJ ASSIGNING FIELD-SYMBOL(<WA_PROJ>) WITH KEY AUFNR = <WA_ITEM>-AUFNR.
*  IF SY-SUBRC = 0.
*    IF <WA_PROJ>-PROFL = 'ZKUS001' OR <WA_PROJ>-PROFL = 'ZKUS002' OR <WA_PROJ>-PROFL = 'ZKUS003' OR <WA_PROJ>-PROFL = 'ZKUS004'.
*      IT_COMP-GL_ACCOUNT = '5301010037'."科目号
*    ENDIF.
*
*    IF <WA_PROJ>-PROFL = 'ZKUS007' OR <WA_PROJ>-PROFL = 'ZKUS008' .
*      IT_COMP-GL_ACCOUNT = '6601460100'."科目号
*    ENDIF.
*  ENDIF.
*
*  IT_COMP-ACTIVITY = <WA_ITEM>-VORNR."作业变哈
*  IT_COMP-ITEM_NUMBER = WA_ZTPS003-RSPOS." 组件的项目号
*  IT_COMP-ITEM_CAT = <WA_ITEM>-POSTP."项目类型
*  "IT_COMP-ENTRY_QUANTITY = <WA_ITEM>-BDMNG."组件需求数量
*  IT_COMP-ENTRY_QUANTITY = WA_ZTPS003-ZZL."组件需求数量 改成总重量
*  IT_COMP-PUR_GROUP = <WA_ITEM>-EKGRP ."采购组
*  IT_COMP-MATL_GROUP = <WA_ITEM>-MATKL. "物料组
*  IT_COMP-BASE_UOM = <WA_ITEM>-MEINS. "基本单位
*  IT_COMP-REQ_DATE = <WA_ITEM>-BDTER. "需求日期
*  IT_COMP-MATERIAL = <WA_ITEM>-MATNR."物料编码
*  IT_COMP-TRACKINGNO = <WA_ITEM>-BEDNR."追踪号
*  IT_COMP-PREQ_NAME = <WA_ITEM>-AFNAM. "申请者
*  IT_COMP-ITEM_TEXT =  <WA_ITEM>-XMWB."项目文本
*  IF <WA_ITEM>-POSTP = 'N'.
*    IT_COMP-TYPE_OF_PUR_RESV  = '1' ."采购类型  网络的采购需求
*    IT_COMP-MRP_RELEVANT = '3'."立即下达 生成采购申请
*  ELSEIF <WA_ITEM>-POSTP = 'L'.
*    IT_COMP-TYPE_OF_PUR_RESV  = '3' ."采购类型  网络预留
*  ELSE.
*    IT_COMP-TYPE_OF_PUR_RESV  = '1' ."采购类型  网络的采购需求
*    IT_COMP-MRP_RELEVANT = '3'."立即下达 生成采购申请
*  ENDIF.
*
*  APPEND  IT_COMP.

  CALL FUNCTION 'BAPI_PS_INITIALIZATION'.

  CALL FUNCTION 'BAPI_NETWORK_COMP_ADD'
    EXPORTING
      NUMBER           = '000000000'
    IMPORTING
      RETURN           = WA_RETURN_NETWORK_COMP
    TABLES
      I_COMPONENTS_ADD = IT_COMP[]
      E_MESSAGE_TABLE  = IT_MESS[].

  LOOP AT IT_MESS ASSIGNING FIELD-SYMBOL(<WA_MESS>) WHERE MESSAGE_TYPE = 'E'.
    G_UPDATE_FLAY = 'X'.
  ENDLOOP.

  CALL FUNCTION 'BAPI_PS_PRECOMMIT'
    TABLES
      ET_RETURN = IT_RETURN_NETWORK_COMP.

  IF G_UPDATE_FLAY = 'X'.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.
  CLEAR:IT_COMP[],IT_MESS[].
ENDIF.

IF R23 = 'X'.
* CALL FUNCTION 'BAPI_PS_INITIALIZATION'.
*
*    "---------------------------------项目
*    CLEAR:WA_RETURN.
*    CALL FUNCTION 'BAPI_BUS2001_SET_STATUS'
*      EXPORTING
*        PROJECT_DEFINITION = <WA_ITEM>-PSPID
*        UNDO_SYSTEM_STATUS = 'TECO'
**       UNDO_USER_STATUS   = 'TECO'
**       SET_SYSTEM_STATUS  = 'TECO'
**       SET_USER_STATUS    = 'TECO'
*      IMPORTING
*        RETURN             = WA_RETURN.
*
*    IF WA_RETURN-TYPE = 'E'.
*      <WA_ITEM>-RZ = '项目消息：' &&  WA_RETURN-MESSAGE.
*      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK '.
*      EXIT.
*    ENDIF.
*
*    "---------------------------------项目
*
*    "---------------------------------WBS
*    SELECT A~POSID INTO CORRESPONDING FIELDS OF TABLE IT_PRPS FROM PRPS AS A
*      INNER JOIN PROJ AS B ON A~PSPHI = B~PSPNR
*      WHERE B~PSPID = <WA_ITEM>-PSPID.
*
*    CLEAR:IT_WBS.
*    LOOP AT IT_PRPS ASSIGNING FIELD-SYMBOL(<WA_PRPS>).
*      WA_WBS-WBS_ELEMENT = <WA_PRPS>-POSID.
*      WA_WBS-UNDO_SYSTEM_STATUS = 'TECO'.
*      APPEND WA_WBS TO IT_WBS.
*      CLEAR:WA_WBS.
*    ENDLOOP.
*
*    "WBS 状态
**      CALL FUNCTION 'BAPI_PS_INITIALIZATION'.
*    CLEAR:IT_WBS_RETURN,WA_RETURN.
*    CALL FUNCTION 'BAPI_BUS2054_SET_STATUS'
*      IMPORTING
*        RETURN              = WA_RETURN
*      TABLES
*        I_WBS_SYSTEM_STATUS = IT_WBS
*        E_RESULT            = IT_WBS_RETURN.
*
*    IF WA_RETURN-TYPE = 'E'.
*      <WA_ITEM>-RZ = 'WBS消息：' &&  WA_RETURN-MESSAGE.
*      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK '.
*      EXIT.
*    ELSE.
*      READ TABLE IT_WBS_RETURN ASSIGNING FIELD-SYMBOL(<WA_WBS_RETURN>) WITH  KEY MESSAGE_TYPE = 'E'.
*      IF SY-SUBRC = 0.
*        <WA_ITEM>-RZ = 'WBS消息：' &&  <WA_WBS_RETURN>-MESSAGE_TEXT.
*        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK '.
*        CONTINUE.
*      ENDIF.
*    ENDIF.
*
*    "---------------------------------WBS
*
*
*    "--------------------------------网络
*    SELECT AUFNR INTO CORRESPONDING FIELDS OF TABLE IT_AFKO FROM AFKO AS A
*      INNER JOIN PROJ AS B ON A~PRONR = B~PSPNR
*      WHERE  B~PSPID = <WA_ITEM>-PSPID.
*
*    LOOP AT IT_AFKO ASSIGNING FIELD-SYMBOL(<WA_AFKO>).
*      CLEAR:WA_RETURN.
**      CALL FUNCTION 'BAPI_PS_INITIALIZATION'.
*      CALL FUNCTION 'BAPI_BUS2002_SET_STATUS'
*        EXPORTING
*          NUMBER             = <WA_AFKO>-AUFNR
*          UNDO_SYSTEM_STATUS = 'TECO'
**         UNDO_USER_STATUS   = ''
**         SET_SYSTEM_STATUS  = 'TECO'
**         SET_USER_STATUS    = ''
*        IMPORTING
*          RETURN             = WA_RETURN.
*      IF WA_RETURN-TYPE = 'E'.
*        <WA_ITEM>-RZ = '项目消息：' &&  WA_RETURN-MESSAGE.
*        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK '.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*    IF <WA_ITEM>-RZ IS NOT INITIAL.
*      CONTINUE.
*    ENDIF.
*
*
*    "--------------------------------网络
*
*    "--------------------------------作业
*    SELECT A~AUFPL A~APLZL B~AUFNR INTO CORRESPONDING FIELDS OF TABLE IT_AFVC FROM AFVC AS A
*      INNER JOIN AFKO AS B ON A~AUFPL = B~AUFPL
*      INNER JOIN  PROJ AS C ON   B~PRONR = C~PSPNR
*      INNER JOIN  AUFK AS D ON B~AUFNR = D~AUFNR
*      WHERE C~PSPID = <WA_ITEM>-PSPID AND
*            D~LOEKZ = ''.
*
*    LOOP AT IT_AFVC ASSIGNING FIELD-SYMBOL(<WA_AFVC>).
*      CLEAR:L_OBJNR.
*      L_OBJNR =  'NV' && <WA_AFVC>-AUFPL && <WA_AFVC>-APLZL.
*
*      CLEAR:L_FLAG.
*      PERFORM FRM_STATUS_CHECK USING L_OBJNR CHANGING L_FLAG.
*      IF L_FLAG = 'X'.
*        CONTINUE.
*      ENDIF.
*
*      CALL FUNCTION 'I_CHANGE_STATUS'
*        EXPORTING
*          OBJNR          = L_OBJNR
*          ESTAT_INACTIVE = 'I0045'
*          ESTAT_ACTIVE   = 'I0002'
*        EXCEPTIONS
*          CANNOT_UPDATE  = 1.
*      IF SY-SUBRC = 1.
*        <WA_ITEM>-RZ = '作业：' && <WA_AFVC>-AUFNR && '|' && <WA_AFVC>-APLZL+4(4)  && '更新失败！' .
*        REPLACE '|' WITH ' ' INTO <WA_ITEM>-RZ.
*        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK '.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
*    IF <WA_ITEM>-RZ IS NOT INITIAL.
*      CONTINUE.
*    ENDIF.
*
*    "--------------------------------作业
*
*    CLEAR:IT_RETURN.
*    CALL FUNCTION 'BAPI_PS_PRECOMMIT'
*      TABLES
*        ET_RETURN = IT_RETURN.
*
*    READ TABLE IT_RETURN ASSIGNING FIELD-SYMBOL(<WA_RETURN_NETWORK>) WITH KEY TYPE = 'E'.
*    IF SY-SUBRC = 0.
*      <WA_ITEM>-RZ = <WA_RETURN_NETWORK>-MESSAGE.
*      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK '.
*      CONTINUE.
*    ENDIF.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT '
*      EXPORTING
*        WAIT = 'X'.
*    <WA_ITEM>-RZ = '项目TECO状态撤销成功！'.
ENDIF.

IF R24 = 'X'.
*CALL FUNCTION 'MEASUREM_DOCUM_RFC_SINGLE_001'
  "CALL FUNCTION 'MEASUREM_DOCUM_RFC_CANCEL'
ENDIF.

IF R25 = 'X'.
*  LS_METHODS-REFNUMBER = '000000'. "iv_ordernum.
*  LS_METHODS-OBJECTTYPE = 'HEADER'.
*  LS_METHODS-METHOD = 'TECO_WITH_NOTIF'.
*  CLEAR LS_METHODS-OBJECTKEY.
*  LS_METHODS-OBJECTKEY = AUFNR.
*  APPEND LS_METHODS TO LT_METHODS.
*  CLEAR LS_METHODS.
*  LS_METHODS-METHOD = 'SAVE'.
*  APPEND LS_METHODS TO LT_METHODS.
*
*  CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
*    TABLES
*      IT_METHODS = LT_METHODS
*      RETURN     = LT_RETURN.
*
*  CALL FUNCTION 'IWO_AER_DV_COMMIT_OR_ROLLBACK'
*    IMPORTING
*      COMMIT = LV_COMMIT
*    TABLES
*      RETURN = LT_RETURN.
*
*  CALL FUNCTION 'IWO_AER_ZZ_RETURN_CLEANUP'
*    TABLES
*      ET_RETURN = LT_RETURN.
*
*  LOOP AT LT_RETURN INTO RETURN.
** The process can continue though it was not possible to
** TECO the order for some reason
** Therefore the errors have to be converted to warnings
*    IF RETURN-TYPE = 'E'.
*      RETURN-TYPE = 'W'.
*    ENDIF.
*    APPEND RETURN.
*  ENDLOOP.
*
*  IF NOT LV_COMMIT IS INITIAL.
*    CALL FUNCTION 'IWO_AER_ZZ_MESSAGE_ADD'
*      TABLES
*        ET_RETURN = RETURN.
*  ENDIF.
*  LOOP AT RETURN.
*    CONCATENATE L_OUT2-RETURN RETURN-MESSAGE INTO L_OUT2-RETURN.
*  ENDLOOP.
*  MODIFY LT_OUT2 FROM L_OUT2.
*ELSE. "无通知单
*  CLEAR:RETURN[].
*  CALL FUNCTION 'IWO_AER_DL_ORDER_TECO'
*    EXPORTING
*      IV_ORDERNUM = AUFNR
*    TABLES
*      ET_RETURN   = RETURN.
*  CLEAR:L_OUT-RETURN.
*  LOOP AT RETURN.
*    CONCATENATE L_OUT2-RETURN RETURN-MESSAGE INTO L_OUT2-RETURN.
*  ENDLOOP.
*  MODIFY LT_OUT2 FROM L_OUT2.
*ENDIF.
ENDIF.

IF R26 = 'X'.
*  DATA:
*    LT_RETURN_O        TYPE STANDARD TABLE OF BAPIRET2,
*    LS_RETURN_O        TYPE BAPIRET2,
*    LT_NUMBERS         TYPE STANDARD TABLE OF BAPI_ALM_NUMBERS,
*    LS_NUMBERS         TYPE BAPI_ALM_NUMBERS,
*    LT_METHODS         TYPE STANDARD TABLE OF BAPI_ALM_ORDER_METHOD,
*    LS_METHODS         TYPE BAPI_ALM_ORDER_METHOD,
*    LT_HEADER_I        TYPE STANDARD TABLE OF BAPI_ALM_ORDER_HEADERS_I,
*    LS_HEADER_I        TYPE BAPI_ALM_ORDER_HEADERS_I,
*    LT_HEADER_UP       TYPE STANDARD TABLE OF BAPI_ALM_ORDER_HEADERS_UP,
*    LS_HEADER_UP       TYPE BAPI_ALM_ORDER_HEADERS_UP,
*    LT_OPERATION_I     TYPE STANDARD TABLE OF BAPI_ALM_ORDER_OPERATION,
*    LS_OPERATION_I     TYPE BAPI_ALM_ORDER_OPERATION,
*    LT_OPERATION_UP    TYPE STANDARD TABLE OF BAPI_ALM_ORDER_OPERATION_UP,
*    LS_OPERATION_UP    TYPE BAPI_ALM_ORDER_OPERATION_UP,
*    LT_COMPONENT_I     TYPE STANDARD TABLE OF BAPI_ALM_ORDER_COMPONENT,
*    LS_COMPONENT_I     TYPE BAPI_ALM_ORDER_COMPONENT,
*    LT_COMPONENT_UP    TYPE STANDARD TABLE OF BAPI_ALM_ORDER_COMPONENT_UP,
*    LS_COMPONENT_UP    TYPE BAPI_ALM_ORDER_COMPONENT_UP,
*    LT_SERVICELINES    TYPE STANDARD TABLE OF BAPI_ALM_SRV_SERVICE_LINE,
*    LS_SERVICELINES    TYPE BAPI_ALM_SRV_SERVICE_LINE,
*    LT_SERVICELINES_UP TYPE STANDARD TABLE OF BAPI_ALM_SRV_SERVICE_LINE_UP,
*    LS_SERVICELINES_UP TYPE BAPI_ALM_SRV_SERVICE_LINE_UP,
*    LT_SRULE           TYPE STANDARD TABLE OF BAPI_ALM_ORDER_SRULE, "结算规则的BAPI
*    LS_SRULE           TYPE  BAPI_ALM_ORDER_SRULE,
*    LT_SRULE_UP        TYPE STANDARD TABLE OF BAPI_ALM_ORDER_SRULE_UP,
*    LS_SRULE_UP        TYPE  BAPI_ALM_ORDER_SRULE_UP.
*
*  DATA:L_MESSAGE TYPE STRING.
**  DATA:IT_ROWS TYPE LVC_T_ROW.
**  CALL METHOD CL_GRID->GET_SELECTED_ROWS
**    IMPORTING
**      ET_INDEX_ROWS = IT_ROWS.
**
** LOOP AT it_item .
** ENDLOOP.
*
*  READ TABLE IT_ITEM TRANSPORTING NO FIELDS WITH  KEY SEL = 'X'.
*  IF SY-SUBRC <> 0.
*    MESSAGE '请先选择要产生维修工单的行！' TYPE 'E'.
*  ENDIF.
*
*  LOOP AT IT_ITEM ASSIGNING FIELD-SYMBOL(<WA_ITEM>) WHERE SEL = 'X'.
*
*
*    IF <WA_ITEM>-AUFNR IS NOT INITIAL.
*      MESSAGE '维修工单已创建,请勿重新创建！' TYPE 'S'  DISPLAY LIKE 'E'.
*      CONTINUE.
*    ENDIF.
*
*
*    " Header
*    LS_METHODS-REFNUMBER    = 1 .
*    LS_METHODS-OBJECTTYPE   = 'HEADER' .
*    LS_METHODS-OBJECTKEY    = '%00000000001' .
*    LS_METHODS-METHOD       = 'CREATE' .
*    APPEND LS_METHODS TO LT_METHODS .
*    CLEAR LS_METHODS .
*
*    " Operation
*    LS_METHODS-REFNUMBER    = 1.
*    LS_METHODS-OBJECTTYPE   = 'OPERATION' .
*    LS_METHODS-OBJECTKEY    = '%00000000001' .
*    LS_METHODS-METHOD       = 'CREATE'.
*    APPEND LS_METHODS TO LT_METHODS .
*    CLEAR LS_METHODS .
*
*    LS_METHODS-REFNUMBER  = 1.
*    LS_METHODS-OBJECTTYPE = 'SRULE'.
*    LS_METHODS-METHOD     = 'CREATE'.
*    LS_METHODS-OBJECTKEY  = '%00000000001'.
*    APPEND LS_METHODS TO LT_METHODS.
*    CLEAR LS_METHODS .
*
*
**  LOOP AT LT_COMPONENT INTO LS_COMPONENT.
**    " Operation
**    LS_METHODS-REFNUMBER    = SY-TABIX.
**    LS_METHODS-OBJECTTYPE   = 'COMPONENT' .
**    LS_METHODS-OBJECTKEY    = '%000000000010010' .
**    LS_METHODS-METHOD       = 'CREATE'.
**    APPEND LS_METHODS TO LT_METHODS .
**    CLEAR LS_METHODS .
**  ENDLOOP.
*
**  IF LS_HEADER-TBTWR IS NOT INITIAL.
**    " Servicelines
**    LS_METHODS-REFNUMBER    = 1 .
**    LS_METHODS-OBJECTTYPE   = 'SERVICELINE' .
**    LS_METHODS-OBJECTKEY    = '%000000000010010' .
**    LS_METHODS-METHOD       = 'CREATE' .
**    APPEND LS_METHODS TO LT_METHODS .
**    CLEAR LS_METHODS .
**  ENDIF.
*    " Save
*    LS_METHODS-METHOD       = 'SAVE' .
*    APPEND LS_METHODS TO LT_METHODS .
*    CLEAR LS_METHODS .
*
*    CLEAR:LT_HEADER_I,LS_HEADER_I,LT_HEADER_UP,LS_HEADER_UP.
*    LS_HEADER_I-ORDERID    = '%00000000001'.        " 订单号
*    IF <WA_ITEM>-EQTYP = 'B'.
*      LS_HEADER_I-ORDER_TYPE = 'ZM05'.       " 订单类型
*    ELSEIF  <WA_ITEM>-EQTYP = 'C'.
*      LS_HEADER_I-ORDER_TYPE = 'ZM10'.       " 订单类型
*    ENDIF.
*
*    LS_HEADER_I-PLANPLANT  = <WA_ITEM>-SWERK.        " 维护计划工厂
*
*    LS_HEADER_I-MN_WK_CTR  = <WA_ITEM>-ARBPL.       " 维护任务的工作中心
*    "LS_HEADER_I-PLANT      = ''.
*    LS_HEADER_I-EQUIPMENT  = <WA_ITEM>-EQUNR.       " 设备号
*    LS_HEADER_I-PLANGROUP  = ''.       " 计划员组
*    LS_HEADER_I-SHORT_TEXT = ''.       " 描述
*    APPEND LS_HEADER_I TO LT_HEADER_I.
*    LS_HEADER_UP-ORDERID    = '%00000000001'.
*    LS_HEADER_UP-MN_WK_CTR  = 'X'.
*    "LS_HEADER_UP-PLANT      = 'X'.
*    LS_HEADER_UP-EQUIPMENT  = 'X'.
*    LS_HEADER_UP-PLANGROUP  = 'X'.
*    LS_HEADER_UP-SHORT_TEXT = 'X'.
*    APPEND LS_HEADER_UP TO LT_HEADER_UP.
*
*    LS_OPERATION_I-ACTIVITY    = '0010'.              " 活动编号
*    LS_OPERATION_I-CONTROL_KEY = 'PM01'.                 " 控制码
*    LS_OPERATION_I-DESCRIPTION = '保养'.        " 工序短文本
*    LS_OPERATION_I-PLANT       =  <WA_ITEM>-SWERK.        " 工厂
*    LS_OPERATION_I-MAINTENANCE_ACTIVITY_TYPE       = '002'.  "维护作业类型
*    LS_OPERATION_I-WORK_CNTR   = <WA_ITEM>-ARBPL.        " 工作中心
**  LS_OPERATION_I-MATL_GROUP  = *.        " 物料组
**  LS_OPERATION_I-PUR_GROUP   = *.        " 采购组
**  LS_OPERATION_I-PURCH_ORG   = *.        " 采购组织
*    APPEND LS_OPERATION_I TO LT_OPERATION_I.
*    CLEAR LS_OPERATION_I.
*    LS_OPERATION_UP-ACTIVITY    = 'X'.
*    LS_OPERATION_UP-CONTROL_KEY = 'X'.
*    LS_OPERATION_UP-DESCRIPTION = 'X'.
*    LS_OPERATION_UP-PLANT       = 'X'.
*    LS_OPERATION_UP-MAINTENANCE_ACTIVITY_TYPE       = 'X'.  "
*    LS_OPERATION_UP-WORK_CNTR   = 'X'.
**  LS_OPERATION_UP-MATL_GROUP  = 'X'.
**  LS_OPERATION_UP-PUR_GROUP   = 'X'.
**  LS_OPERATION_UP-PURCH_ORG   = 'X'.
*    APPEND LS_OPERATION_UP TO LT_OPERATION_UP.
*    CLEAR LS_OPERATION_UP.
**
**  IF LS_HEADER-TBTWR IS NOT INITIAL.
**    CLEAR:LT_SERVICELINES,LS_SERVICELINES,LT_SERVICELINES_UP,LS_SERVICELINES_UP.
**    LS_SERVICELINES-ACTIVITY    = '0010'.                     " 活动编号
**    LS_SERVICELINES-SRV_LINE    = '0000000010'.               " 行号
**    LS_SERVICELINES-SHORT_TEXT  = *.            　　　　　　　　" 短文本
**    LS_SERVICELINES-QUANTITY    = *.                          " 数量带标记
**    LS_SERVICELINES-UOM         = *.                          " 基本计量单位
**    LS_SERVICELINES-GROSS_PRICE = *.       　　　　　　　　　　　" 总价
**    LS_SERVICELINES-NET_PRICE   = *.      　　　　　　　　      " 净价
**    APPEND LS_SERVICELINES TO LT_SERVICELINES.
**    LS_SERVICELINES_UP-ACTIVITY    = '0010'.
**    LS_SERVICELINES_UP-SRV_LINE    = '0000000010'.
**    LS_SERVICELINES_UP-SHORT_TEXT  = 'X'.
**    LS_SERVICELINES_UP-QUANTITY    = 'X'.
**    LS_SERVICELINES_UP-UOM         = 'X'.
**    LS_SERVICELINES_UP-GROSS_PRICE = 'X'.
**    LS_SERVICELINES_UP-NET_PRICE   = 'X'.
**    APPEND LS_SERVICELINES_UP TO LT_SERVICELINES_UP.
**  ENDIF.
*
**  CLEAR:LT_COMPONENT_I,LS_COMPONENT_I,LT_COMPONENT_UP,LS_COMPONENT_UP.
**  LOOP AT LT_COMPONENT INTO LS_COMPONENT.
**    LS_COMPONENT_I-ITEM_NUMBER       = *.                      " BOM 项目号
**    LS_COMPONENT_I-ITEM_TEXT1        = *.    　　　　　　　　　　 " 描述
**    LS_COMPONENT_I-PLANT             = *.     　　　　　　　　　  " 工厂
**    LS_COMPONENT_I-REQUIREMENT_QUANTITY      = *.  　　　　　　　" 需求数量
**    LS_COMPONENT_I-REQUIREMENT_QUANTITY_UNIT = *. 　　　　　　　　" 单位
**    LS_COMPONENT_I-PUR_GROUP         = *.        　　　　　　　　 " 采购组
**    LS_COMPONENT_I-PURCH_ORG         = *.                　　　　" 采购组织
**    LS_COMPONENT_I-MATL_GROUP        = *.           　　　　     " 物料组
**    LS_COMPONENT_I-ITEM_CAT          = *.                       " 项目类别
**    APPEND LS_COMPONENT_I TO LT_COMPONENT_I.
**    CLEAR LS_COMPONENT_I.
**
**    LS_COMPONENT_UP-ITEM_NUMBER       = 'X'.
**    LS_COMPONENT_UP-ITEM_TEXT1          = 'X'.
**    LS_COMPONENT_UP-PLANT             = 'X'.
**    LS_COMPONENT_UP-REQUIREMENT_QUANTITY      = 'X'.
**    LS_COMPONENT_UP-REQUIREMENT_QUANTITY_UNIT = 'X'.
**    LS_COMPONENT_UP-PUR_GROUP         = 'X'.
**    LS_COMPONENT_UP-PURCH_ORG         = 'X'.
**    LS_COMPONENT_UP-MATL_GROUP        = 'X'.
**    LS_COMPONENT_UP-ITEM_CAT          = 'X'.
**    APPEND LS_COMPONENT_UP TO LT_COMPONENT_UP.
**    CLEAR LS_COMPONENT_UP.
**  ENDLOOP.
*
*    "------------------------------生产计算规则
*    CLEAR:LS_SRULE,LT_SRULE.
*    LS_SRULE-OBJNR = 'TM0000000001OR'.
*
*
*    IF <WA_ITEM>-SWERK = '1101'.
*      LS_SRULE-COSTCENTER =  '110A090001'. "成本中心
*    ELSEIF <WA_ITEM>-SWERK = '1201'.
*      LS_SRULE-COSTCENTER =  '120A000000'. "成本中心
*    ELSEIF <WA_ITEM>-SWERK = '1301'.
*      LS_SRULE-COSTCENTER =  '1300A01001'. "成本中心
*    ENDIF.
*
*    LS_SRULE-LFDNR = '001'.    "分配规则的顺序号码
*    LS_SRULE-SETTL_TYPE = 'FUL'.
*    LS_SRULE-PERCENTAGE  = '100.00'. "结算百分比
*    LS_SRULE-EXTNR = '001'.
*    "LS_SRULE-COMP_CODE  = '1100'. "公司代码
*    "LS_SRULE-ORDERID  = '%00000000001'.
*    LS_SRULE-SOURCE = '0'.
*    APPEND LS_SRULE TO LT_SRULE.
*
*    CLEAR:LS_SRULE_UP,LT_SRULE_UP.
*    LS_SRULE_UP-COSTCENTER =  'X'. "成本中心
*    LS_SRULE_UP-SETTL_TYPE  = 'X'. "结算类型
*    LS_SRULE_UP-PERCENTAGE  = 'X'. "结算百分比
*    LS_SRULE_UP-EXTNR = 'X'.
*    "LS_SRULE_UP-COMP_CODE  = 'X'. "公司代码
*    "LS_SRULE_UP-ORDERID  = 'X'.
*    LS_SRULE_UP-SOURCE = 'X'.
*    APPEND LS_SRULE_UP TO LT_SRULE_UP.
*
** 创建维修工单
*    CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
*      TABLES
*        IT_METHODS      = LT_METHODS
*        IT_HEADER       = LT_HEADER_I
*        IT_HEADER_UP    = LT_HEADER_UP
*        IT_OPERATION    = LT_OPERATION_I
*        IT_OPERATION_UP = LT_OPERATION_UP
**       IT_COMPONENT    = LT_COMPONENT_I
**       IT_COMPONENT_UP = LT_COMPONENT_UP
*        RETURN          = LT_RETURN_O
**       ET_NUMBERS      = LT_NUMBERS
*        IT_SRULE        = LT_SRULE      "结算规则
*        IT_SRULE_UP     = LT_SRULE_UP.
**     IT_SERVICELINES    = LT_SERVICELINES
**     IT_SERVICELINES_UP = LT_SERVICELINES_UP.
*
*
*
*
*    "READ TABLE LT_RETURN_O TRANSPORTING NO FIELDS WITH KEY TYPE = 'E'.
*    LOOP AT LT_RETURN_O INTO LS_RETURN_O .
*      L_MESSAGE = L_MESSAGE &&  LS_RETURN_O-MESSAGE.
*    ENDLOOP.
*
*    READ TABLE LT_RETURN_O  TRANSPORTING NO FIELDS WITH KEY TYPE = 'E'.
*    IF SY-SUBRC = 0.
*      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*      MESSAGE L_MESSAGE TYPE 'S' DISPLAY LIKE 'E'.
*    ELSE.
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*        EXPORTING
*          WAIT = 'X'.
*      <WA_ITEM>-AUFNR = L_MESSAGE+6(10).
*      MESSAGE '订单' && L_MESSAGE+6(10) && '创建成功' TYPE 'S'.
*    ENDIF.
ENDIF.

IF R27 = 'X'.
  DATA:WA_STKO    LIKE STKO_API02,
       WA_O_STPO  LIKE STPO_API02,
       WA_WARNING LIKE CAPIFLAG-FLWARNING.
  DATA:IT_STPO TYPE STANDARD TABLE OF STPO_API02 WITH HEADER LINE.

  CALL FUNCTION 'CSAP_MAT_BOM_OPEN'
    EXPORTING
      MATERIAL      = '102318313'
      PLANT         = '1101'
      BOM_USAGE     = '1'
      ALTERNATIVE   = '01'
      VALID_FROM    = '20200402'
    IMPORTING
      O_STKO        = WA_STKO
      FL_WARNING    = WA_WARNING
    TABLES
      T_STPO        = IT_STPO
    EXCEPTIONS
      ERROR_MESSAGE = 1
      OTHERS        = 2.

  LOOP AT IT_STPO ASSIGNING FIELD-SYMBOL(<WA_STPO>) .
    AT FIRST.
      <WA_STPO>-COMP_QTY = '3'.
      CALL FUNCTION 'CSAP_BOM_ITEM_MAINTAIN'
        EXPORTING
          I_STPO        = <WA_STPO>
        IMPORTING
          O_STPO        = WA_O_STPO
          FL_WARNING    = WA_WARNING
        EXCEPTIONS
          ERROR_MESSAGE = 1
          OTHERS        = 2.

      CALL FUNCTION 'CSAP_MAT_BOM_CLOSE'
        EXPORTING
          FL_COMMIT_AND_WAIT = 'X'
        IMPORTING
          FL_WARNING         = WA_WARNING
        EXCEPTIONS
          ERROR_MESSAGE      = 1
          OTHERS             = 2.
    ENDAT.
  ENDLOOP.

ENDIF.

IF R28 = 'X'.
*  CALL FUNCTION 'L_TO_CREATE_TR'
*    EXPORTING
*      I_LGNUM                        = L_LGNUM
*      I_TBNUM                        = L_TBNUM
*      IT_TRITE                       = TRITE[]
*      I_COMMIT_WORK                  = ''
*    IMPORTING
*      E_TANUM                        = L_TANUM
*      E_TEILK                        = L_TEILK
*    TABLES
*      T_WMGRP_MSG                    = IT_MSG[]
*    EXCEPTIONS
*      FOREIGN_LOCK                   = 1
*      QM_RELEVANT                    = 2
*      TR_COMPLETED                   = 3
*      XFELD_WRONG                    = 4
*      LDEST_WRONG                    = 5
*      DRUKZ_WRONG                    = 6
*      TR_WRONG                       = 7
*      SQUIT_FORBIDDEN                = 8
*      NO_TO_CREATED                  = 9
*      UPDATE_WITHOUT_COMMIT          = 10
*      NO_AUTHORITY                   = 11
*      PREALLOCATED_STOCK             = 12
*      PARTIAL_TRANSFER_REQ_FORBIDDEN = 13
*      INPUT_ERROR                    = 14
*      ERROR_MESSAGE                  = 15
*      OTHERS                         = 16.
*
*  CALL FUNCTION 'L_TO_CONFIRM'
*    EXPORTING
*      I_LGNUM       = L_LGNUM
*      I_TANUM       = L_TANUM
*      I_COMMIT_WORK = ''
*    TABLES
*      T_LTAP_CONF   = IT_LTAP_CONF[]
*    EXCEPTIONS
*      ERROR_MESSAGE = 1.
*  IF SY-SUBRC <> 0.
*    CLEAR:L_MSG.
*    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*      EXPORTING
*        MSGID               = SY-MSGID
*        MSGNR               = SY-MSGNO
*        MSGV1               = SY-MSGV1
*        MSGV2               = SY-MSGV2
*        MSGV3               = SY-MSGV3
*        MSGV4               = SY-MSGV4
*      IMPORTING
*        MESSAGE_TEXT_OUTPUT = L_MSG.
*    SUBRC = 'E'.
*    MESSAGE = MESSAGE && 'WM层级转储确认失败:' &&  L_MSG && '(转储单:' && L_TANUM && ');消息号:' && SY-MSGID && SY-MSGNO && ';'.
*    ROLLBACK WORK.
*    RETURN.
*  ELSE.
*    SUBRC = 'S'.
*    MESSAGE = MESSAGE && '转储申请单' &&  L_TANUM && '确认成功!;'.
*    COMMIT WORK.
*  ENDIF.
ENDIF.

IF R29 = 'X'.
*  CALL FUNCTION 'L_TO_CREATE_POSTING_CHANGE'
*    EXPORTING
*      I_LGNUM       = L_LGNUM
*      I_LUBUI       = WA_LUBU
*      I_COMMIT_WORK = ''
*    IMPORTING
*      E_TANUM       = L_TANUM
*    TABLES
*      T_LUBQU       = IT_LUBU[]
*    EXCEPTIONS
*      ERROR_MESSAGE = 1.
*  IF SY-SUBRC = 0.
*    COMMIT WORK.
*    SUBRC = 'S'.
*    MESSAGE = MESSAGE && '转储单' && L_TANUM && '创建成功!;'.
*  ELSE.
*    CLEAR:L_MSG.
*    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*      EXPORTING
*        MSGID               = SY-MSGID
*        MSGNR               = SY-MSGNO
*        MSGV1               = SY-MSGV1
*        MSGV2               = SY-MSGV2
*        MSGV3               = SY-MSGV3
*        MSGV4               = SY-MSGV4
*      IMPORTING
*        MESSAGE_TEXT_OUTPUT = L_MSG.
*    SUBRC = 'E'.
*    MESSAGE = MESSAGE && 'WM层级创建转储单失败:' &&  L_MSG && ';消息号:' && SY-MSGID && SY-MSGNO && ';'.
*    ROLLBACK WORK.
*    RETURN.
*  ENDIF.
*
*  CALL FUNCTION 'L_TO_CONFIRM'
*    EXPORTING
*      I_LGNUM       = L_LGNUM
*      I_TANUM       = L_TANUM
*      I_COMMIT_WORK = ''
*    TABLES
*      T_LTAP_CONF   = IT_LTAP_CONF[].
*  IF SY-SUBRC <> 0.
*    CLEAR:L_MSG.
*    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*      EXPORTING
*        MSGID               = SY-MSGID
*        MSGNR               = SY-MSGNO
*        MSGV1               = SY-MSGV1
*        MSGV2               = SY-MSGV2
*        MSGV3               = SY-MSGV3
*        MSGV4               = SY-MSGV4
*      IMPORTING
*        MESSAGE_TEXT_OUTPUT = L_MSG.
*    SUBRC = 'E'.
*    MESSAGE = MESSAGE && 'WM层级转储确认失败:' &&  L_MSG && '(转储单:' && L_TANUM && ');消息号:' && SY-MSGID && SY-MSGNO && ';'.
*    ROLLBACK WORK.
*    RETURN.
*  ELSE.
*    SUBRC = 'S'.
*    MESSAGE = MESSAGE && '转储单' && L_TANUM && '确认成功!;'.
*    COMMIT WORK.
*  ENDIF.
ENDIF.

IF R30 = 'X'.
*  CALL FUNCTION 'L_TO_CREATE_MULTIPLE'
*    EXPORTING
*      I_LGNUM       = L_LGNUM
*      I_BWLVS       = L_BWLVS
*      I_UPDATE_TASK = ''
*    IMPORTING
*      E_TANUM       = L_TANUM
*    TABLES
*      T_LTAP_CREAT  = IT_LTAP[]
*    EXCEPTIONS
*      ERROR_MESSAGE = 1.
*  IF SY-SUBRC = 0.
*    SUBRC = 'S'.
*    MESSAGE = MESSAGE && '转储单' && L_TANUM && '创建成功!;'.
*    TANUM = L_TANUM.
*    COMMIT WORK.
*  ELSE.
*    CLEAR:L_MSG.
*    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*      EXPORTING
*        MSGID               = SY-MSGID
*        MSGNR               = SY-MSGNO
*        MSGV1               = SY-MSGV1
*        MSGV2               = SY-MSGV2
*        MSGV3               = SY-MSGV3
*        MSGV4               = SY-MSGV4
*      IMPORTING
*        MESSAGE_TEXT_OUTPUT = L_MSG.
*    SUBRC = 'E'.
*    MESSAGE =  'WM层级创建转储单错误:' && L_MSG && ';消息号;' &&  SY-MSGID && SY-MSGNO && ';'.
*    ROLLBACK WORK.
*    RETURN.
*  ENDIF.
*
*  CALL FUNCTION 'L_TO_CONFIRM'
*    EXPORTING
*      I_LGNUM       = L_LGNUM
*      I_TANUM       = L_TANUM
*      I_COMMIT_WORK = ''
*    TABLES
*      T_LTAP_CONF   = IT_LTAP_CONF[]
*    EXCEPTIONS
*      ERROR_MESSAGE = 1.
*  IF SY-SUBRC <> 0.
*    CLEAR:L_MSG.
*    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*      EXPORTING
*        MSGID               = SY-MSGID
*        MSGNR               = SY-MSGNO
*        MSGV1               = SY-MSGV1
*        MSGV2               = SY-MSGV2
*        MSGV3               = SY-MSGV3
*        MSGV4               = SY-MSGV4
*      IMPORTING
*        MESSAGE_TEXT_OUTPUT = L_MSG.
*
*    SUBRC = 'E'.
*    MESSAGE =  'WM层级转单确认错误:' && L_MSG && '(转储单:' && L_TANUM && ');消息号;' &&  SY-MSGID && SY-MSGNO && ';'.
*    ROLLBACK WORK.
*    RETURN.
*  ELSE.
*    SUBRC = 'S'.
*    MESSAGE = MESSAGE && '转储单' && L_TANUM && '确认成功!;'.
*    COMMIT WORK.
*  ENDIF.
ENDIF.

IF R31 = 'X'.
*  DATA:L_LGNUM TYPE LINV-LGNUM,
*       L_IVNUM TYPE LINV-IVNUM,
*       L_NVERS TYPE LINV-NVERS,
*       L_MSG   TYPE STRING.
*  DATA:IT_LINV TYPE STANDARD TABLE OF E1LINVX WITH HEADER LINE.
*
*  LOOP AT  IT_INVENTORY  ASSIGNING FIELD-SYMBOL(<WA_INVENTORY2>).
*    PERFORM FRM_AUFNR_INPUT  CHANGING <WA_INVENTORY2>-IVNUM.
*    PERFORM FRM_MATNR_INPUT CHANGING <WA_INVENTORY2>-MATNR.
*    IF <WA_INVENTORY2>-MEINS = 'PCS'.
*      <WA_INVENTORY2>-MEINS = 'ST'.
*    ENDIF.
*  ENDLOOP.
*
*  IF IT_INVENTORY[] IS NOT INITIAL.
*    SELECT A~LGNUM,A~LGTYP,A~IVNUM,B~WERKS INTO TABLE @DATA(IT_LINK) FROM LINK AS A
*      INNER JOIN LINV AS B ON A~IVNUM = B~IVNUM
*      FOR ALL ENTRIES IN @IT_INVENTORY
*      WHERE A~IVNUM = @IT_INVENTORY-IVNUM .
*    SORT IT_LINK BY  WERKS IVNUM LGTYP .
*    DELETE ADJACENT DUPLICATES FROM IT_LINK COMPARING WERKS IVNUM LGTYP.
*  ENDIF.
*
*  LOOP AT IT_INVENTORY ASSIGNING FIELD-SYMBOL(<WA_INVENTORY>).
*    IT_LINV-IVNUM = <WA_INVENTORY>-IVNUM."系统盘点记录号
*    IT_LINV-IVPOS = '1'."盘点项目编号
*    IT_LINV-LGTYP = <WA_INVENTORY>-LGTYP."仓储类型
*
**    IF IT_LINV-LGTYP IS INITIAL.
*    READ TABLE IT_LINK ASSIGNING FIELD-SYMBOL(<WA_LINK>) WITH  KEY IVNUM = <WA_INVENTORY>-IVNUM.
*    IF SY-SUBRC = 0.
*      IT_LINV-LGTYP  = <WA_LINK>-LGTYP.
*      IT_LINV-WERKS  = <WA_LINK>-WERKS.
*      IT_LINV-LGNUM =  <WA_LINK>-LGNUM."仓库号/混合仓库
*    ENDIF.
**    ENDIF.
*
*    IT_LINV-LGPLA =  <WA_INVENTORY>-LGPLA."仓位
*    IT_LINV-MATNR = <WA_INVENTORY>-MATNR."
*    IT_LINV-MATNR_LONG   = <WA_INVENTORY>-MATNR."
**    IT_LINV-WERKS = <WA_INVENTORY>-WERKS."
*    IT_LINV-CHARG = <WA_INVENTORY>-CHARG."
*    IT_LINV-LGORT = <WA_INVENTORY>-LGORT.
**  IT_LINV-LSONR = ''."特殊库存编号 “VBELN POSNR
*    IT_LINV-SOBKZ = <WA_INVENTORY>-SOBKZ."特殊库存标识
*    IT_LINV-BESTQ = <WA_INVENTORY>-BESTQ."仓库管理系统中的库存类别
*    IT_LINV-MENGA = <WA_INVENTORY>-MENGE."数量
*
*    IT_LINV-ALTME = <WA_INVENTORY>-MEINS. "计量结果
*    IT_LINV-WDATU = <WA_INVENTORY>-WDATU."收货日期
*    IT_LINV-KZNUL = 'X'.
*
*    APPEND IT_LINV.
*    CLEAR:IT_LINV.
*  ENDLOOP.
**  IT_LINV-LGNUM = 'ZY'."
**  IT_LINV-IVNUM = '0000000057'."
***  IT_LINV-IVPOS = '1'."
**  IT_LINV-LGTYP = 'Z01'."
**  IT_LINV-LGPLA = 'JD100151'."
**  IT_LINV-MATNR = '000000305030001029'."
**  IT_LINV-MATNR_LONG   = '000000305030001029'."
**  IT_LINV-WERKS = '1101'."
**  IT_LINV-CHARG = '1910180003'."
**  IT_LINV-LGORT = 'Z999'.
***  IT_LINV-LSONR = ''."特殊库存编号 “VBELN POSNR
**  IT_LINV-SOBKZ = ''."特殊库存标识
**  IT_LINV-BESTQ = ''."仓库管理系统中的库存类别
**  IT_LINV-MENGA = '50'."数量
**  IT_LINV-ALTME = 'ST'. "计量结果
**  IT_LINV-WDATU = SY-DATUM."收货日期
**  APPEND IT_LINV.
*
*  CALL FUNCTION 'L_INV_COUNT_EXT'
*    EXPORTING
*      I_COMMIT      = 'X'
*    IMPORTING
*      ALLE_LGNUM    = L_LGNUM
*      ALLE_IVNUM    = L_IVNUM
*      ALLE_NVERS    = L_NVERS
*    TABLES
*      S_LINV        = IT_LINV[]
*    EXCEPTIONS
*      ERROR_MESSAGE = 1.
*
*  IF SY-SUBRC = 0.
*    SUBRC = 'S'.
*    MESSAGE = MESSAGE && '盘点凭证' && L_IVNUM && '结果录入成功！'.
*  ELSE.
*
*    CALL FUNCTION 'MESSAGE_TEXT_BUILD'
*      EXPORTING
*        MSGID               = SY-MSGID
*        MSGNR               = SY-MSGNO
*        MSGV1               = SY-MSGV1
*        MSGV2               = SY-MSGV2
*        MSGV3               = SY-MSGV3
*        MSGV4               = SY-MSGV4
*      IMPORTING
*        MESSAGE_TEXT_OUTPUT = L_MSG.
*
*    SUBRC = 'E'.
*    MESSAGE = MESSAGE && L_MSG && '(消息号:'&& SY-MSGID && SY-MSGNO   &&')'.
*  ENDIF.
ENDIF.

IF R33 = 'X'.
  DATA:WA_QALS TYPE  QALS.
  SELECT SINGLE * INTO WA_QALS FROM QALS WHERE PRUEFLOS = '040000005158'.

  WA_QALS-LMENGE01 = '4'.
  WA_QALS-LMENGEZUB = '26'.

  CALL FUNCTION 'QPBU_LOT_UPDATE'
    EXPORTING
      QALS_NEW      = WA_QALS
      IV_NOEVENT    = 'X'
    EXCEPTIONS
      ERROR_MESSAGE = 1.

  IF SY-SUBRC <> 0.
    WRITE: SY-MSGID,SY-MSGNO,SY-MSGTY,SY-MSGV1,SY-MSGV2,SY-MSGV3,SY-MSGV4.
  ENDIF.
ENDIF.

IF R34 = 'X'.
  DATA:UD_DATA   TYPE BAPI2045UD,
       RETURN_UD TYPE BAPIRETURN1.
  UD_DATA-UD_SELECTED_SET  = 'ZKUS04'.
  UD_DATA-UD_PLANT         = '1101'.
  UD_DATA-UD_CODE_GROUP    =  'ZKUS04'.
  UD_DATA-UD_CODE          = 'ACC'.
  UD_DATA-UD_RECORDED_BY_USER = SY-UNAME.

  CALL FUNCTION 'BAPI_INSPLOT_SETUSAGEDECISION'
    EXPORTING
      NUMBER  = '0000000000' "检验批
      UD_DATA = UD_DATA
    IMPORTING
      RETURN  = RETURN_UD.
  IF RETURN-TYPE <> 'E'.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.
ENDIF.

IF R35 = 'X'.
*BAPI_HU_PACK
*  SELECT * INTO TABLE @DATA(IT_PACKING) FROM LIPS WHERE VBELN = @DN_ITEM-DELIV_NUMB AND PSTYV = 'TAL'."是否是帮助包装物料
*  LOOP AT IT_PACKING ASSIGNING FIELD-SYMBOL(<WA_PACKING>).
*
*    MOVE-CORRESPONDING <WA_PACKING> TO GT_VBPOK.
*    GT_VBPOK-VBELN_VL = DN_ITEM-DELIV_NUMB.
*    GT_VBPOK-POSNR_VL = <WA_PACKING>-POSNR.
*    READ TABLE IT_DATA ASSIGNING FIELD-SYMBOL(<WA_DATA3>) INDEX 1.
*    IF SY-SUBRC = 0.
*      GT_VBPOK-VBELN    = <WA_DATA3>-VBELN.
*      GT_VBPOK-POSNN    = <WA_DATA3>-POSNR.
*    ENDIF.
*
*
*    "修改 HM 20200106 按配置表取库存地点
*    SELECT SINGLE RAUBE INTO @DATA(L_RAUBE) FROM MARA WHERE MATNR = @<WA_PACKING>-MATNR.
*    SELECT SINGLE LGORT INTO GT_VBPOK-LGORT FROM TVKOL WHERE WERKS = <WA_PACKING>-WERKS AND RAUBE = L_RAUBE.
**            GT_VBPOK-LGORT = '1113'.
*
*    APPEND GT_VBPOK.
*  ENDLOOP.
*
*  IF ONLY_CREATE = ''.  "直接拣配过账
*    IF FLAG_UD = ''.  "检验批UD失败则不过账
*      W_VBKOK-WABUC = 'X'.
*    ENDIF.
*  ENDIF.

*          DATA:LS_LIKP    TYPE LIKPVB,
*               LT_ADDRESS TYPE STANDARD TABLE OF SADRVB,
*               LT_V51VP   TYPE STANDARD TABLE OF V51VP,
*               LS_VEKPVB  TYPE VEKPVB,
*               LT_VEKP    TYPE VSEP_T_IVEKP,
*               LT_VEPOVB  TYPE VEPOVB,
*               WA_REQUEST TYPE PACKING_ITEM_HU,
*               WA_GENERAL TYPE  HUM_CREATE_ATTRIBUTES_S.
*
*
*          DATA:IT_VERP TYPE STANDARD TABLE OF VERPO WITH HEADER LINE,
*               IT_VERK TYPE STANDARD TABLE OF VERKO WITH HEADER LINE.
*
*          CALL FUNCTION 'HU_PACKING_REFRESH'.
**          DO 3 TIMES.
*          CALL FUNCTION 'HU_READ_DELIVERY_AND_INIT'
*            EXPORTING
*              IF_DELIVERY = DN_ITEM-DELIV_NUMB
*            IMPORTING
*              ES_LIKP     = LS_LIKP
**             ET_HEADADRESS = LT_ADDRESS
*            TABLES
*              ET_V51VP    = LT_V51VP.
*
**          LOOP AT  LT_V51VP ASSIGNING FIELD-SYMBOL(<WA_V51VP>).
**            LS_VEKPVB-EXIDV = '$000000001'.
**            LS_VEKPVB-VHILM = '000000000000000022'
*
*          LS_VEKPVB-EXIDV = '$000000001'.
*          LS_VEKPVB-VHILM = '000000000000000022'.
**          WA_GENERAL-COPY_INPUT_DATA = 'X'.
*          CALL FUNCTION 'V51P_FIND_HEADER'
*            EXPORTING
*              IS_VEKP    = LS_VEKPVB
*              IS_GENERAL = WA_GENERAL
*            IMPORTING
*              ES_HEADER  = LS_VEKPVB.
*
*          CALL FUNCTION 'V51P_HU_CONTENS'
*            EXPORTING
*              IF_HU_NUMBER = LS_VEKPVB-VENUM
*            IMPORTING
*              ET_IVEKP     = LT_VEKP.
*
*          READ TABLE LT_V51VP ASSIGNING FIELD-SYMBOL(<WA_V51VP2>)  INDEX 1.
*          IF SY-SUBRC = 0.
*            MOVE-CORRESPONDING <WA_V51VP2> TO WA_REQUEST.
*          ENDIF.
*          WA_REQUEST-QUANTITY = '10'.
*
*
*
*          WA_REQUEST-VENUM = LS_VEKPVB-VENUM.
*          WA_REQUEST-EXIDV = LS_VEKPVB-EXIDV.
**          WA_REQUEST-ALTME = LS_VEKPVB-VRKME.
*          WA_REQUEST-MEINS = LS_VEKPVB-MEINS.
**          WA_REQUEST-BELNR = LS_VEKPVB-VBELN.
**          WA_REQUEST-POSNR = LS_VEKPVB-POSNR.
*          WA_REQUEST-VELIN = '1'.
*
*
*          CALL FUNCTION 'HU_PACKING_AND_UNPACKING'
*            EXPORTING
*              IS_PACKING_REQUEST = WA_REQUEST
*            IMPORTING
*              ES_ITEM            = LT_VEPOVB.
*
*          MOVE-CORRESPONDING LT_VEPOVB TO IT_VERP.
*
*
*          APPEND IT_VERP.
*          MOVE-CORRESPONDING LT_VEPOVB TO IT_VERK.
*          APPEND IT_VERK.
*          CLEAR:IT_VERP.
*          ENDDO.
*          ENDLOOP.

ENDIF.
IF R36 = 'X'.
  CALL METHOD CL_GUI_FRONTEND_SERVICES=>EXECUTE
    EXPORTING
      APPLICATION            = 'JAVA' "需要执行的语言
      PARAMETER              = 'TEST' "java 类名
      DEFAULT_DIRECTORY      = 'D:\' "路径
      MINIMIZED              = 'X'
      SYNCHRONOUS            = 'WAIT'
      OPERATION              = 'OPEN'
    EXCEPTIONS
      CNTL_ERROR             = 1
      ERROR_NO_GUI           = 2
      BAD_PARAMETER          = 3
      FILE_NOT_FOUND         = 4
      PATH_NOT_FOUND         = 5
      FILE_EXTENSION_UNKNOWN = 6
      ERROR_EXECUTE_FAILED   = 7
      SYNCHRONOUS_FAILED     = 8
      NOT_SUPPORTED_BY_GUI   = 9
      OTHERS                 = 10.
  IF SY-SUBRC = 0.
    WRITE:'操作成功！'.
  ELSE.
    WRITE:'操作失败！'.
  ENDIF.
ENDIF.

IF R37 = 'X'.
*https://wenku.baidu.com/view/ccf921fd482fb4daa48d4b84.html
  DATA:IT_BLNTAB  TYPE STANDARD TABLE OF BLNTAB WITH HEADER LINE,
       IT_FTCLEAR TYPE STANDARD TABLE OF FTCLEAR WITH HEADER LINE,
       IT_FTPOST  TYPE STANDARD TABLE OF FTPOST WITH HEADER LINE,
       IT_FTTAX   TYPE STANDARD TABLE OF FTTAX WITH HEADER LINE.
  DATA:L_SUBRC LIKE SY-SUBRC.


  CALL FUNCTION 'POSTING_INTERFACE_START'
    EXPORTING
      I_FUNCTION = 'C'
      I_KEEP     = 'X'
      I_MODE     = 'A'
    EXCEPTIONS
      OTHERS     = 6.


  "行项目录入界面，要部分清需要在这个里面添加相关行项目让借贷相等
  DEFINE POPULATE_FTPOST.
    IT_FTPOST-STYPE = &1.
    IT_FTPOST-COUNT = &2.
    IT_FTPOST-FNAM  = &3.
    IT_FTPOST-FVAL  = &4.
    APPEND IT_FTPOST.
  END-OF-DEFINITION.

  "前天输入客户供应商界面（Tcode：/5）进入输入要请凭证界面
  DEFINE POPULATE_FTCLEAR.
    IT_FTCLEAR-AGKOA  = 'K'. "K FOR VENDER,D FOR CUSTMOR, S FOR GL
    IT_FTCLEAR-AGBUK  = '1100'. "公司代码
    IT_FTCLEAR-XNOPS  = 'X'.            "标准未清项目
    IT_FTCLEAR-AGKON  = &1.             "科目
    IT_FTCLEAR-SELFD  = &2.             "BELNR 字段固定
    IT_FTCLEAR-SELVON = &3.             "会计凭证搜索--开始上限值
*    IT_FTCLEAR-SELBIS = '2'.           "会计凭证搜索--开始下限值
    APPEND IT_FTCLEAR.
  END-OF-DEFINITION.


  "凭证头部数据
  POPULATE_FTPOST:  'K' 1 'BKPF-BUKRS' '1100', "公司代码
                    'K' 1 'BKPF-BLART' 'KZ', "凭证类型(清发票)
                    'K' 1 'BKPF-BLDAT' SY-DATUM,       "凭证日期
                    'K' 1 'BKPF-BUDAT' SY-DATUM,       "过帐日期
                    'K' 1 'BKPF-WAERS' 'CNY',
                    'K' 1 'BKPF-XBLNR' '头部参考凭证1234',
                    'K' 1 'RF05A-AUGTX' '行项目文本',
                    'K' 1 'BKPF-BKTXT' '行项目文本'.

  "银行现金科目（部分清要加一行负向银行科目）
  POPULATE_FTPOST:'P' '1' 'RF05A-NEWBS' '50',  "记账码
                  'P' '1' 'RF05A-NEWKO' '1001010001',  "记账科目 现金银行科目

                  'P' '1' 'COBL-ZZCFCD' '100', "现金流量吗
                  'P' '1' 'BSEG-WRBTR'  '1'.        "金额
  POPULATE_FTPOST:'P' '1' 'RF05A-NEWUM' '',  "SGL标识 目标总账标识
                  'P' '1' 'BSEG-ZFBDT'  SY-DATUM.        "起算日
  POPULATE_FTPOST:'P' '1' 'BSEG-SGTXT'  '行项目文本'.  "


  "需要清账的凭证号(/5 界面)可以一次清多张
  POPULATE_FTCLEAR: '0000200049' 'BELNR' '15000002142020'.

  CALL FUNCTION 'POSTING_INTERFACE_CLEARING'
    EXPORTING
      I_AUGLV   = 'UMBUCHNG' "AUSGZAHL付款 EINGZAHL收款 GUTSCHRI贷方凭证 UMBUCHNG转帐并清帐\
      I_TCODE   = 'FB05'     "只能是FB05
      I_SGFUNCT = 'C'
    IMPORTING
      E_MSGID   = SY-MSGID
      E_MSGNO   = SY-MSGNO
      E_MSGTY   = SY-MSGTY
      E_MSGV1   = SY-MSGV1
      E_MSGV2   = SY-MSGV2
      E_MSGV3   = SY-MSGV3
      E_MSGV4   = SY-MSGV4
      E_SUBRC   = L_SUBRC
    TABLES
      T_BLNTAB  = IT_BLNTAB
      T_FTCLEAR = IT_FTCLEAR
      T_FTPOST  = IT_FTPOST
      T_FTTAX   = IT_FTTAX.

  IF L_SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ENDIF.
  "https://answers.sap.com/questions/8146955/clearing-invoice-issue-when-using-bapiaccdocument-.html
  "通过BAPI_ACc_DOCUMENT_POST 加 CLEAR_DOCUMENTS 清账历程进行清账

  DATA:WA_HEADER2    TYPE BAPIACHE09,
       IT_ACCOUNTGL2 TYPE STANDARD TABLE OF BAPIACGL09 WITH HEADER LINE,
       IT_PAYABLE    TYPE STANDARD TABLE OF BAPIACAP09 WITH HEADER LINE,
       IT_CURRENCY   TYPE STANDARD TABLE OF BAPIACCR09 WITH HEADER LINE,
       IT_RETURN_ACC TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE,
       L_OBJ_KEY2    TYPE BAPIACHE09-OBJ_KEY.
  WA_HEADER2-COMP_CODE = '1100'."
  WA_HEADER2-DOC_DATE = SY-DATUM."
  WA_HEADER2-PSTNG_DATE = SY-DATUM."
  WA_HEADER2-TRANS_DATE = SY-DATUM."
  WA_HEADER2-FISC_YEAR = '2020'."
  WA_HEADER2-USERNAME = SY-UNAME.
  WA_HEADER2-DOC_TYPE = 'KZ'."凭证类型

  IT_ACCOUNTGL2-ITEMNO_ACC = '1'."
  IT_ACCOUNTGL2-GL_ACCOUNT = '1001010001'."
  IT_ACCOUNTGL2-COMP_CODE = '1100'."
  IT_ACCOUNTGL2-ITEM_TEXT = 'ITEM_TEXT'."
  IT_ACCOUNTGL2-TAX_CODE = '**'."税码
  IT_ACCOUNTGL2-ACCT_TYPE = 'S'.
  APPEND IT_ACCOUNTGL2.
  CLEAR:IT_ACCOUNTGL2.

  IT_PAYABLE-ITEMNO_ACC = '2'."
  IT_PAYABLE-VENDOR_NO = '0000200048'."
  IT_PAYABLE-GL_ACCOUNT = '2202010100'.
  IT_PAYABLE-COMP_CODE = '1100'."
  IT_PAYABLE-PMNTTRMS = 'Y010'."
  IT_PAYABLE-BLINE_DATE = SY-DATUM."付款起算日
  IT_PAYABLE-TAX_CODE = 'JA'."税码
  IT_PAYABLE-PMNT_BLOCK = 'R'."付款冻结码 R 发票这行要 发票参考号 REBZG 发票号 REBZJ = 发票年度 REBZZ = 发票项目 REBZT = V
  IT_PAYABLE-ITEM_TEXT = '行项目文本1'."必输
  APPEND IT_PAYABLE.
  CLEAR:IT_PAYABLE.

  IT_PAYABLE-ITEMNO_ACC = '3'."
  IT_PAYABLE-VENDOR_NO = '0000200048'."
  IT_PAYABLE-GL_ACCOUNT = '2202010100'.
  IT_PAYABLE-COMP_CODE = '1100'."
  IT_PAYABLE-BLINE_DATE = SY-DATUM."付款起算日
  IT_PAYABLE-ITEM_TEXT = '行项目文本2'."必输
  APPEND IT_PAYABLE.
  CLEAR:IT_PAYABLE.

  IT_CURRENCY-ITEMNO_ACC =  '1'."
  IT_CURRENCY-CURRENCY =  'CNY'."
  IT_CURRENCY-AMT_DOCCUR =  '-1'."
  APPEND IT_CURRENCY.
  CLEAR:IT_CURRENCY.
  IT_CURRENCY-ITEMNO_ACC =  '2'."
  IT_CURRENCY-CURRENCY =  'CNY'."
  IT_CURRENCY-AMT_DOCCUR =  '-653.45'."
  APPEND IT_CURRENCY.
  CLEAR:IT_CURRENCY.
  IT_CURRENCY-ITEMNO_ACC =  '3'."
  IT_CURRENCY-CURRENCY =  'CNY'."
  IT_CURRENCY-AMT_DOCCUR =  '654.45'."
  APPEND IT_CURRENCY.
  CLEAR:IT_CURRENCY.

  CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
    EXPORTING
      DOCUMENTHEADER = WA_HEADER
    IMPORTING
      OBJ_KEY        = L_OBJ_KEY2
    TABLES
      ACCOUNTGL      = IT_ACCOUNTGL
      ACCOUNTPAYABLE = IT_PAYABLE
      CURRENCYAMOUNT = IT_CURRENCY
      RETURN         = IT_RETURN_ACC.
  READ TABLE IT_RETURN_ACC TRANSPORTING NO FIELDS WITH KEY TYPE = 'E'.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.

  DATA:W_RETURN    TYPE BAPIRETURN,
       T_LINEITEMS TYPE STANDARD TABLE OF BAPI3008_2,
       W_LINEITEMS LIKE LINE OF T_LINEITEMS,
       T_AUSZ1     TYPE STANDARD TABLE OF AUSZ1,
       W_AUSZ1     LIKE LINE OF T_AUSZ1,
       T_AUSZ2     TYPE STANDARD TABLE OF AUSZ2,
       W_AUSZ2     LIKE LINE OF T_AUSZ2.

  CALL FUNCTION 'BAPI_AP_ACC_GETOPENITEMS'
    EXPORTING
      COMPANYCODE = '1100'
      VENDOR      = '0000200049'
      KEYDATE     = SY-DATUM
    IMPORTING
      RETURN      = W_RETURN
    TABLES
      LINEITEMS   = T_LINEITEMS.

  LOOP AT T_LINEITEMS INTO W_LINEITEMS.
    W_AUSZ1-BELNR = W_LINEITEMS-DOC_NO.
    W_AUSZ1-BUKRS = W_LINEITEMS-COMP_CODE.
    W_AUSZ1-GJAHR = W_LINEITEMS-FISC_YEAR.
    W_AUSZ1-BUZEI = W_LINEITEMS-ITEM_NUM.
    APPEND W_AUSZ1 TO T_AUSZ1.

    W_AUSZ2-BUKRS = '1100'.
    W_AUSZ2-AKTIO = 'A'.
    W_AUSZ2-AUGBL =  L_OBJ_KEY+0(10).
    W_AUSZ2-AUGDT = SY-DATUM.
    W_AUSZ2-AUGGJ = SY-DATUM.
    APPEND W_AUSZ2 TO T_AUSZ2.

    CALL FUNCTION 'CLEAR_DOCUMENTS' " IN UPDATE TASK
      TABLES
        T_AUSZ1       = T_AUSZ1
        T_AUSZ2       = T_AUSZ2
      EXCEPTIONS
        ERROR_MESSAGE = 1
        OTHERS        = 2.
    IF SY-SUBRC = 0.
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
    ENDIF.

    REFRESH: T_AUSZ2[],T_AUSZ1[].
  ENDLOOP.
ENDIF.

IF R38 = 'X'.
  DATA:"HEADER_DATA    LIKE BAPIOBDLVHDRCHG,
       "HEADER_CONTROL LIKE BAPIOBDLVHDRCTRLCHG,
*       RETURN          LIKE TABLE OF BAPIRET2 WITH HEADER LINE,
       "ITEM_DATA      LIKE TABLE OF BAPIOBDLVITEMCHG WITH HEADER LINE,
       W_ITEM_DATA    TYPE BAPIOBDLVITEMCHG,
       W_ITEM_CONTROL TYPE BAPIOBDLVITEMCTRLCHG,
       "ITEM_CONTROL   LIKE TABLE OF BAPIOBDLVITEMCTRLCHG WITH HEADER LINE,
       "ITEM_DATA_SPL  LIKE TABLE OF  /SPE/BAPIOBDLVITEMCHG  WITH HEADER LINE,
       "IT_RETURN      LIKE TABLE OF BAPIRET2 WITH HEADER LINE,
       POSNR          LIKE LIPS-POSNR.


  DATA:BEGIN OF IT_DATA OCCURS 0,
         POSNR TYPE LIPS-POSNR,
         MENGE TYPE MENGE_D,
         CHARG TYPE LIPS-CHARG,
       END OF IT_DATA.
  DATA:VBELN TYPE LIPS-VBELN VALUE '0660000855'.
  HEADER_DATA-DELIV_NUMB     =  VBELN.  "vbeln_vl. "交货单号
  HEADER_CONTROL-DELIV_NUMB  =  VBELN.  "vbeln_vl.


  SELECT * INTO TABLE @DATA(IT_LIKP) FROM LIPS WHERE VBELN = @VBELN.


  DATA(IT_POSNR) = IT_DATA[].
  SORT IT_POSNR BY POSNR.
  DELETE ADJACENT DUPLICATES FROM IT_POSNR COMPARING POSNR.

  POSNR = '900000'.
  LOOP AT IT_POSNR ASSIGNING FIELD-SYMBOL(<WA_POSNR>).
    "---------------------------------------------原来行项目
    ITEM_DATA-DELIV_NUMB = VBELN.
    ITEM_DATA-DELIV_ITEM      = <WA_POSNR>-POSNR.       "拆分后的新行项目
    READ TABLE IT_LIKP ASSIGNING FIELD-SYMBOL(<WA_LIKP>) WITH  KEY POSNR = <WA_POSNR>-POSNR.
    IF SY-SUBRC = 0.
      ITEM_DATA-FACT_UNIT_NOM = <WA_LIKP>-UMVKZ.
      ITEM_DATA-FACT_UNIT_DENOM = <WA_LIKP>-UMVKN.
    ENDIF.
    APPEND ITEM_DATA.
    CLEAR:ITEM_DATA.

    ITEM_CONTROL-DELIV_NUMB = VBELN.
    ITEM_CONTROL-DELIV_ITEM = <WA_POSNR>-POSNR.
    ITEM_CONTROL-CHG_DELQTY = 'X'.
    APPEND ITEM_CONTROL.
    CLEAR:ITEM_CONTROL.

    LOOP AT IT_DATA ASSIGNING FIELD-SYMBOL(<WA_DATA>) WHERE POSNR = <WA_POSNR>-POSNR.
      POSNR = POSNR + 1.
      "---------------------------------------------批次拆分行项目
      ITEM_DATA-DELIV_NUMB = VBELN.
      ITEM_DATA-HIERARITEM      = <WA_DATA>-POSNR.             "上级行项目
      ITEM_DATA-DELIV_ITEM      = POSNR.       "拆分后的新行项目
      ITEM_DATA-BATCH = <WA_DATA>-CHARG.
      ITEM_DATA-DLV_QTY = <WA_DATA>-MENGE.
      ITEM_DATA-USEHIERITM      = '1'.  "批次子项目

      READ TABLE IT_LIKP ASSIGNING FIELD-SYMBOL(<WA_LIKP2>) WITH  KEY POSNR = <WA_DATA>-POSNR.
      IF SY-SUBRC = 0.
        ITEM_DATA-FACT_UNIT_NOM = <WA_LIKP2>-UMVKZ.
        ITEM_DATA-FACT_UNIT_DENOM = <WA_LIKP2>-UMVKN.
      ENDIF.

      APPEND ITEM_DATA.
      CLEAR:ITEM_DATA.

      ITEM_CONTROL-DELIV_NUMB = VBELN.
      ITEM_CONTROL-DELIV_ITEM = POSNR.
      ITEM_CONTROL-CHG_DELQTY = 'X'.
      APPEND ITEM_CONTROL.
      CLEAR:ITEM_CONTROL.
    ENDLOOP.
  ENDLOOP.

  SET UPDATE TASK LOCAL.
  CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
    EXPORTING
      HEADER_DATA    = HEADER_DATA
      HEADER_CONTROL = HEADER_CONTROL
      DELIVERY       = VBELN
*     TECHN_CONTROL  =
*     HEADER_DATA_SPL               =
*     HEADER_CONTROL_SPL            =
*     SENDER_SYSTEM  =
    TABLES
*     HEADER_PARTNER =
*     HEADER_PARTNER_ADDR           =
*     HEADER_DEADLINES              =
      ITEM_DATA      = ITEM_DATA
      ITEM_CONTROL   = ITEM_CONTROL
*     ITEM_SERIAL_NO =
*     SUPPLIER_CONS_DATA            =
*     EXTENSION1     =
*     EXTENSION2     =
      RETURN         = IT_RETURN
*     TOKENREFERENCE =
      ITEM_DATA_SPL  = ITEM_DATA_SPL
*     COLLECTIVE_CHANGE_ITEMS       =
*     NEW_ITEM_DATA  =
*     NEW_ITEM_DATA_SPL             =
*     NEW_ITEM_ORG   =
*     ITEM_DATA_DOCU_BATCH          =
*     CWM_ITEM_DATA  =
    .
  LOOP AT  IT_RETURN  ASSIGNING FIELD-SYMBOL(<WA_RETURN_11>) WHERE TYPE = 'E' OR TYPE = 'A'.
    MESSAGE = MESSAGE && <WA_RETURN_11>-MESSAGE && '('&& <WA_RETURN_11>-ID && <WA_RETURN_11>-NUMBER && ')'.
  ENDLOOP.
  IF SY-SUBRC = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    STATUS = 'E'.
    RETURN.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
  ENDIF.

*
*  "---------------------------------------拣配过账
  DATA:GT_PROTT LIKE PROTT OCCURS 0 WITH HEADER LINE,
       GT_VBPOK LIKE TABLE OF VBPOK   WITH HEADER LINE,
       W_VBKOK  TYPE VBKOK.


  W_VBKOK-VBELN_VL = VBELN.
  W_VBKOK-WABUC           = 'X'.            "自动过帐货物移动
  W_VBKOK-WADAT_IST       = SY-DATUM.   "实际交货日期

  SELECT * INTO TABLE @DATA(IT_LIKP_POSTING) FROM LIPS WHERE VBELN = @VBELN.
  LOOP AT IT_LIKP_POSTING ASSIGNING FIELD-SYMBOL(<WA_POSTING>).
    CLEAR GT_VBPOK.
    GT_VBPOK-VBELN_VL = <WA_POSTING>-VBELN.
    GT_VBPOK-POSNR_VL = <WA_POSTING>-POSNR.
    GT_VBPOK-VBELN    = <WA_POSTING>-VGBEL.
    GT_VBPOK-POSNN    = <WA_POSTING>-VGPOS.
    GT_VBPOK-MATNR    = <WA_POSTING>-MATNR.
    GT_VBPOK-CHARG    = <WA_POSTING>-CHARG.
    GT_VBPOK-LFIMG    = <WA_POSTING>-LFIMG.
    GT_VBPOK-LGORT    = <WA_POSTING>-LGORT.
    APPEND GT_VBPOK.
  ENDLOOP.


  CALL FUNCTION 'WS_DELIVERY_UPDATE'
    EXPORTING
      VBKOK_WA           = W_VBKOK
      SYNCHRON           = 'X'
      NO_MESSAGES_UPDATE = ' '
      UPDATE_PICKING     = 'X'
      COMMIT             = 'X'
      DELIVERY           = VBELN
      NICHT_SPERREN      = 'X'
    TABLES
      PROT               = GT_PROTT
      VBPOK_TAB          = GT_VBPOK
*     VERKO_TAB          = IT_VERK[]
*     VERPO_TAB          = IT_VERP[]
    EXCEPTIONS
      OTHERS             = 0.
  IF SY-SUBRC <> 0.
    STATUS = 'E'.
  ELSE.

  ENDIF.

ENDIF.
