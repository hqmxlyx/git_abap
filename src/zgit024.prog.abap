*&---------------------------------------------------------------------*
*& Report ZGIT024
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZGIT024.


PARAMETERS: PROGNAME(120).       "程序名称
DATA:STR     TYPE STRING,
     REP_STR TYPE STRING.
DATA:BEGIN OF IT_REPORT OCCURS 0,
       ROW TYPE CHAR3000,
     END OF IT_REPORT.

DATA:BEGIN OF IT_TYPE OCCURS 0,
       ROW TYPE CHAR3000,
     END OF IT_TYPE.

DATA:BEGIN OF IT_SQL OCCURS 0,
       ROW TYPE CHAR3000,
     END OF IT_SQL.

DATA:BEGIN OF IT_LAYOUT OCCURS 0,
       ROW TYPE CHAR3000,
     END OF IT_LAYOUT.

DATA:BEGIN OF IT_STRUC  OCCURS 0,
       TABNAME     TYPE CHAR30,
       FIELDNAME   TYPE CHAR30,
       FIELDASNAME TYPE CHAR30,
       FIELDDESC   TYPE CHAR30,
     END OF IT_STRUC.

DATA:BEGIN OF IT_TAB OCCURS 0,
       TABNAME   TYPE CHAR30,
       TABASNAME TYPE CHAR30,
     END OF IT_TAB.

DATA:IT_ITEM TYPE STANDARD TABLE OF ACDOCA WITH HEADER LINE.
"---------------------------------------------------------SQL编辑区
SELECT
  A~RBUKRS   "公司代码
  A~GJAHR   "年度
  A~POPER   "期间
  A~BELNR   "凭证编号
  A~BUDAT   "过账日期
  A~RCNTR   "正刚成本中心
  B~KTEXT   "正刚成本中心文本
  A~RFAREA   "功能范围
  A~RACCT   "正刚会计科目
  E~TXT20   "正刚科目描述
  A~KSL   "金额
  A~RHCUR   "货币
  A~MATNR   "物料
  A~MSL   "数量
  A~RUNIT   "单位
  A~SGTXT   "凭证文本
  A~VRGNG   "业务事务
  A~DOCLN  "行项目
  A~CO_BELNR   "CO凭证号
  A~CO_BUZEI   "CO凭证行项目
  A~CO_BELKZ   "CO借贷标识
  D~TXZ01 "采购订单文本
  INTO CORRESPONDING FIELDS OF TABLE IT_ITEM FROM ACDOCA AS A
  LEFT JOIN CSKT AS B ON A~RCNTR = B~KOSTL AND B~KOKRS = 'KUSC' AND B~SPRAS = SY-LANGU
  LEFT JOIN MAKT AS C ON A~MATNR = C~MATNR AND C~SPRAS = SY-LANGU
  LEFT JOIN EKPO AS D ON A~EBELN = D~EBELN AND A~EBELP = D~EBELP
  LEFT JOIN SKAT AS E ON A~RACCT = E~SAKNR AND E~SPRAS = SY-LANGU AND E~KTOPL = 'KUSA'.


"---------------------------------------------------------SQL编辑区

READ REPORT 'ZGIT024' INTO IT_REPORT.

LOOP AT  IT_REPORT.
  STR = IT_REPORT-ROW.
  TRANSLATE STR TO UPPER CASE.

  FIND 'SELECT' IN STR.
  IF SY-SUBRC = 0.
    DATA(L_BEGIN_STRUC) = 'X'."开始才分SQL
    DATA(L_BEGIN_SQL) = 'X'."sql 开始标识
  ENDIF.

  FIND 'FROM' IN STR.
  IF SY-SUBRC = 0.
    L_BEGIN_STRUC = ''.
    DATA(L_BEGIN_TAB) = 'X'.
  ENDIF.

  FIND 'WHERE' IN STR.
  IF SY-SUBRC = 0.
    L_BEGIN_TAB = ''.
    DATA(L_BEGIN_WHERE) = 'X'.
  ENDIF.

  IF L_BEGIN_STRUC = 'X'.
    REPLACE ',' WITH '' INTO STR.
    SPLIT STR AT '~' INTO DATA(STR1) DATA(STR2).
    IF SY-SUBRC = 0.
      CONDENSE STR1 NO-GAPS.
      IF STR1 <> 'SELECT'.
        IT_STRUC-TABNAME = STR1.
        IT_STRUC-FIELDNAME = STR2.
        FIND '"' IN STR2.
        IF SY-SUBRC = 0.
          DATA(L_LEN) = STRLEN( STR2 ).
          SEARCH STR2 FOR '"'.
          IF SY-SUBRC = 0.
            DATA(L_INDEX) = SY-FDPOS + 1.
          ENDIF.
          L_LEN = L_LEN - L_INDEX.
          IT_STRUC-FIELDDESC = STR2+L_INDEX(L_LEN).
          REP_STR = IT_STRUC-FIELDDESC.
          REPLACE REP_STR WITH '' INTO STR2.
          REPLACE '"' WITH '' INTO STR2.
          CONDENSE STR2 NO-GAPS.
          IT_STRUC-FIELDNAME = STR2.
        ENDIF.

        FIND 'AS' IN STR2.
        IF SY-SUBRC = 0.
          SPLIT STR2 AT 'AS' INTO DATA(STR3) DATA(STR4).
          CONDENSE STR3 NO-GAPS.
          IT_STRUC-FIELDNAME = STR3.
          CONDENSE STR4 NO-GAPS.
          IT_STRUC-FIELDASNAME = STR4.
        ENDIF.

        APPEND IT_STRUC.
      ENDIF.
    ENDIF.
    CLEAR: IT_STRUC,STR1,STR2.
  ENDIF.

  IF L_BEGIN_TAB = 'X'.
    L_LEN = STRLEN( STR ).
    SEARCH STR FOR 'FROM'.
    IF SY-SUBRC = 0.
      L_INDEX = SY-FDPOS + 4.
      L_LEN = L_LEN - L_INDEX.
      STR = STR+L_INDEX(L_LEN).
    ENDIF.
    SEARCH STR FOR 'JOIN'.
    IF SY-SUBRC = 0.
      L_INDEX = SY-FDPOS + 4.
      L_LEN = L_LEN - L_INDEX.
      STR = STR+L_INDEX(L_LEN).
    ENDIF.
    SPLIT STR AT ' ' INTO STR1 STR2 STR3 STR4 DATA(STR5).
    IF SY-SUBRC = 0.
      IT_TAB-TABNAME = STR2.
      IT_TAB-TABASNAME = STR4.
      APPEND IT_TAB.
    ENDIF.
  ENDIF.

  IF L_BEGIN_SQL = 'X'.
    IT_SQL-ROW = IT_REPORT-ROW.
    APPEND IT_SQL.
    CLEAR IT_SQL.
  ENDIF.

  "退出语句
  IF L_BEGIN_TAB = 'X' OR L_BEGIN_WHERE = 'X'.
    FIND '.' IN STR.
    IF SY-SUBRC = 0.
      EXIT.
    ENDIF.
  ENDIF.
  CLEAR:STR,STR1,STR2,STR3,STR4,STR5,L_INDEX,L_LEN,IT_TAB.
ENDLOOP.


READ REPORT 'ZGIT024A' INTO IT_REPORT.


"创建结构
LOOP AT IT_STRUC.
  READ TABLE IT_TAB ASSIGNING FIELD-SYMBOL(<WA_TAB>) WITH  KEY TABASNAME = IT_STRUC-TABNAME.
  IF SY-SUBRC = 0.
    IT_TYPE-ROW = IT_STRUC-FIELDNAME && '|TYPE|' && <WA_TAB>-TABNAME && '-' && IT_STRUC-FIELDNAME && ','.
    IF IT_STRUC-FIELDASNAME IS NOT INITIAL.
      IT_TYPE-ROW = IT_STRUC-FIELDASNAME && '|TYPE|' && <WA_TAB>-TABNAME && '-' && IT_STRUC-FIELDNAME && ','.
    ENDIF.
    REPLACE '|' WITH ' ' INTO IT_TYPE-ROW.
    REPLACE '|' WITH ' ' INTO IT_TYPE-ROW.
    APPEND IT_TYPE.
    CLEAR:IT_TYPE.
  ENDIF.
ENDLOOP.

"插入结构
LOOP AT IT_REPORT.
  STR = IT_REPORT-ROW.
  TRANSLATE STR TO UPPER CASE.
  "创建结构
  IF STR IS NOT INITIAL.
    CONDENSE STR NO-GAPS.
    FIND  STR IN  'SELTYPEC,'.
    IF SY-SUBRC = 0.
      L_INDEX = SY-TABIX + 1.
      INSERT LINES OF IT_TYPE  INTO IT_REPORT INDEX L_INDEX.
    ENDIF.
  ENDIF.
  CLEAR:STR.
ENDLOOP.

"插入SQL
LOOP AT IT_REPORT.
  STR = IT_REPORT-ROW.
  TRANSLATE STR TO UPPER CASE.
  "创建结构
  IF STR IS NOT INITIAL.
    CONDENSE STR NO-GAPS.
    FIND  STR IN  'FORMFRM_GET_DATA.'.
    IF SY-SUBRC = 0.
      L_INDEX = SY-TABIX + 1.
      INSERT LINES OF IT_SQL  INTO IT_REPORT INDEX L_INDEX.
    ENDIF.
  ENDIF.
  CLEAR:STR.
ENDLOOP.


"创建laygout
LOOP AT IT_STRUC.
  READ TABLE IT_TAB ASSIGNING FIELD-SYMBOL(<WA_TAB_LAYOUT>) WITH  KEY TABASNAME = IT_STRUC-TABNAME.
  IF SY-SUBRC = 0.
    DATA(L_LAYOUT) = ''' '''' '''' '''' '''' '''' '''.
    IT_LAYOUT-ROW = 'MACRO_FILL_FCAT L_COLPOS ''' && IT_STRUC-FIELDNAME && L_LAYOUT  && <WA_TAB_LAYOUT>-TABNAME && ''' ''' && IT_STRUC-FIELDNAME && '''.'.

    IF IT_STRUC-FIELDDESC IS  INITIAL AND  IT_STRUC-FIELDASNAME IS NOT INITIAL.
      IT_LAYOUT-ROW = 'MACRO_FILL_FCAT L_COLPOS ''' && IT_STRUC-FIELDASNAME && L_LAYOUT  && <WA_TAB_LAYOUT>-TABNAME && ''' ''' && IT_STRUC-FIELDNAME && '''.'.
    ENDIF.

    IF IT_STRUC-FIELDDESC IS NOT INITIAL AND  IT_STRUC-FIELDASNAME IS  INITIAL.
      L_LAYOUT = ''' '''' '''' '''' '''' '''.
      IT_LAYOUT-ROW = 'MACRO_FILL_FCAT L_COLPOS ''' && IT_STRUC-FIELDNAME && ''' ''' && IT_STRUC-FIELDDESC && '' && L_LAYOUT  && <WA_TAB_LAYOUT>-TABNAME && ''' ''' && IT_STRUC-FIELDNAME && '''.'.
    ENDIF.

    IF IT_STRUC-FIELDDESC IS NOT INITIAL AND  IT_STRUC-FIELDASNAME IS NOT INITIAL.
      L_LAYOUT = '''  ''''  '''' '''' '''' '''.
      IT_LAYOUT-ROW = 'MACRO_FILL_FCAT L_COLPOS ''' && IT_STRUC-FIELDASNAME && ''' ''' && IT_STRUC-FIELDDESC && '' && L_LAYOUT  && <WA_TAB_LAYOUT>-TABNAME && ''' ''' && IT_STRUC-FIELDNAME && '''.'.
    ENDIF.
    APPEND IT_LAYOUT.
    CLEAR:IT_LAYOUT.
  ENDIF.
ENDLOOP.

"插入LAYOUT
LOOP AT IT_REPORT.
  STR = IT_REPORT-ROW.
  TRANSLATE STR TO UPPER CASE.
  "创建结构
  IF STR IS NOT INITIAL.
    CONDENSE STR NO-GAPS.
    FIND  STR IN  '  DATA:L_COLPOSTYPELVC_S_FCAT-COL_POS.'.
    IF SY-SUBRC = 0.
      L_INDEX = SY-TABIX + 1.
      INSERT LINES OF IT_LAYOUT  INTO IT_REPORT INDEX L_INDEX.
    ENDIF.
  ENDIF.
  CLEAR:STR.
ENDLOOP.

"写入报表
*WRITE:'asdfad'.
INSERT REPORT PROGNAME FROM IT_REPORT.
